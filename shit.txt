http://localhost:8080/webpack-dev-server/
webpack result is served from /
content is served from /Users/sondra/Programming/hackreactor/thesis/buoyantpyramid
Hash: 020fea497c9ca3395d7e
Version: webpack 1.12.14
Time: 3684ms
     Asset       Size  Chunks             Chunk Names
index.html  222 bytes          [emitted]  

ERROR in ./client/main.js
Module build failed: TypeError: Path must be a string. Received { __esModule: true,
  Plugin: [Function: Plugin],
  transformFile: [Function: transformFile],
  transformFileSync: [Function: transformFileSync],
  File: [Function: File],
  options: 
   { filename: 
      { type: 'filename',
        description: 'filename to use when reading from stdin - this will be used in source-maps, errors etc',
        default: 'unknown',
        shorthand: 'f' },
     filenameRelative: { hidden: true, type: 'string' },
     inputSourceMap: { hidden: true },
     env: { hidden: true, default: {} },
     mode: { description: '', hidden: true },
     retainLines: 
      { type: 'boolean',
        default: false,
        description: 'retain line numbers - will result in really ugly code' },
     highlightCode: 
      { description: 'enable/disable ANSI syntax highlighting of code frames (on by default)',
        type: 'boolean',
        default: true },
     suppressDeprecationMessages: { type: 'boolean', default: false, hidden: true },
     presets: { type: 'list', description: '', default: [] },
     plugins: { type: 'list', default: [], description: '' },
     ignore: 
      { type: 'list',
        description: 'list of glob paths to **not** compile',
        default: [] },
     only: 
      { type: 'list',
        description: 'list of glob paths to **only** compile' },
     code: { hidden: true, default: true, type: 'boolean' },
     metadata: { hidden: true, default: true, type: 'boolean' },
     ast: { hidden: true, default: true, type: 'boolean' },
     extends: { type: 'string', hidden: true },
     comments: 
      { type: 'boolean',
        default: true,
        description: 'write comments to generated output (true by default)' },
     shouldPrintComment: 
      { hidden: true,
        description: 'optional callback to control whether a comment should be inserted, when this is used the comments option is ignored' },
     compact: 
      { type: 'booleanString',
        default: 'auto',
        description: 'do not include superfluous whitespace characters and line terminators [true|false|auto]' },
     minified: 
      { type: 'boolean',
        default: false,
        description: 'save as much bytes when printing [true|false]' },
     sourceMap: { alias: 'sourceMaps', hidden: true },
     sourceMaps: 
      { type: 'booleanString',
        description: '[true|false|inline]',
        default: false,
        shorthand: 's' },
     sourceMapTarget: 
      { type: 'string',
        description: 'set `file` on returned source map' },
     sourceFileName: 
      { type: 'string',
        description: 'set `sources[0]` on returned source map' },
     sourceRoot: 
      { type: 'filename',
        description: 'the root from which all sources are relative' },
     babelrc: 
      { description: 'Whether or not to look up .babelrc and .babelignore files',
        type: 'boolean',
        default: true },
     sourceType: { description: '', default: 'module' },
     auxiliaryCommentBefore: 
      { type: 'string',
        description: 'print a comment before any injected non-user code' },
     auxiliaryCommentAfter: 
      { type: 'string',
        description: 'print a comment after any injected non-user code' },
     resolveModuleSource: { hidden: true },
     getModuleId: { hidden: true },
     moduleRoot: 
      { type: 'filename',
        description: 'optional prefix for the AMD module formatter that will be prepend to the filename on module definitions' },
     moduleIds: 
      { type: 'boolean',
        default: false,
        shorthand: 'M',
        description: 'insert an explicit id for modules' },
     moduleId: 
      { description: 'specify a custom name for module ids',
        type: 'string' },
     passPerPreset: 
      { description: 'Whether to spawn a traversal pass per a preset. By default all presets are merged.',
        type: 'boolean',
        default: false,
        hidden: true } },
  buildExternalHelpers: [Function],
  template: [Function],
  version: '6.7.2',
  util: 
   { __esModule: true,
     canCompile: { [Function: canCompile] EXTENSIONS: [Object] },
     list: [Function: list],
     regexify: [Function: regexify],
     arrayify: [Function: arrayify],
     booleanify: [Function: booleanify],
     shouldIgnore: [Function: shouldIgnore],
     inherits: [Function],
     inspect: { [Function: inspect] colors: [Object], styles: [Object] } },
  messages: 
   { __esModule: true,
     get: [Function: get],
     parseArgs: [Function: parseArgs],
     MESSAGES: 
      { tailCallReassignmentDeopt: 'Function reference has been reassigned, so it will probably be dereferenced, therefore we can\'t optimise this with confidence',
        classesIllegalBareSuper: 'Illegal use of bare super',
        classesIllegalSuperCall: 'Direct super call is illegal in non-constructor, use super.$1() instead',
        scopeDuplicateDeclaration: 'Duplicate declaration $1',
        settersNoRest: 'Setters aren\'t allowed to have a rest',
        noAssignmentsInForHead: 'No assignments allowed in for-in/of head',
        expectedMemberExpressionOrIdentifier: 'Expected type MemberExpression or Identifier',
        invalidParentForThisNode: 'We don\'t know how to handle this node within the current parent - please open an issue',
        readOnly: '$1 is read-only',
        unknownForHead: 'Unknown node type $1 in ForStatement',
        didYouMean: 'Did you mean $1?',
        codeGeneratorDeopt: 'Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.',
        missingTemplatesDirectory: 'no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues',
        unsupportedOutputType: 'Unsupported output type $1',
        illegalMethodName: 'Illegal method name $1',
        lostTrackNodePath: 'We lost track of this node\'s position, likely because the AST was directly manipulated',
        modulesIllegalExportName: 'Illegal export $1',
        modulesDuplicateDeclarations: 'Duplicate module declarations with the same source but in different scopes',
        undeclaredVariable: 'Reference to undeclared variable $1',
        undeclaredVariableType: 'Referencing a type alias outside of a type annotation',
        undeclaredVariableSuggestion: 'Reference to undeclared variable $1 - did you mean $2?',
        traverseNeedsParent: 'You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.',
        traverseVerifyRootFunction: 'You passed `traverse()` a function when it expected a visitor object, are you sure you didn\'t mean `{ enter: Function }`?',
        traverseVerifyVisitorProperty: 'You passed `traverse()` a visitor object with the property $1 that has the invalid property $2',
        traverseVerifyNodeType: 'You gave us a visitor for the node type $1 but it\'s not a valid type',
        pluginNotObject: 'Plugin $2 specified in $1 was expected to return an object when invoked but returned $3',
        pluginNotFunction: 'Plugin $2 specified in $1 was expected to return a function but returned $3',
        pluginUnknown: 'Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4',
        pluginInvalidProperty: 'Plugin $2 specified in $1 provided an invalid property of $3' } },
  types: 
   { __esModule: true,
     is: [Function: is],
     isType: [Function: isType],
     validate: [Function: validate],
     shallowEqual: [Function: shallowEqual],
     appendToMemberExpression: [Function: appendToMemberExpression],
     prependToMemberExpression: [Function: prependToMemberExpression],
     ensureBlock: [Function: ensureBlock],
     clone: [Function: clone],
     cloneWithoutLoc: [Function: cloneWithoutLoc],
     cloneDeep: [Function: cloneDeep],
     buildMatchMemberExpression: [Function: buildMatchMemberExpression],
     removeComments: [Function: removeComments],
     inheritsComments: [Function: inheritsComments],
     inheritTrailingComments: [Function: inheritTrailingComments],
     inheritLeadingComments: [Function: inheritLeadingComments],
     inheritInnerComments: [Function: inheritInnerComments],
     inherits: [Function: inherits],
     assertNode: [Function: assertNode],
     isNode: [Function: isNode],
     STATEMENT_OR_BLOCK_KEYS: [ 'consequent', 'body', 'alternate' ],
     FLATTENABLE_KEYS: [ 'body', 'expressions' ],
     FOR_INIT_KEYS: [ 'left', 'init' ],
     COMMENT_KEYS: [ 'leadingComments', 'trailingComments', 'innerComments' ],
     LOGICAL_OPERATORS: [ '||', '&&' ],
     UPDATE_OPERATORS: [ '++', '--' ],
     BOOLEAN_NUMBER_BINARY_OPERATORS: [ '>', '<', '>=', '<=' ],
     EQUALITY_BINARY_OPERATORS: [ '==', '===', '!=', '!==' ],
     COMPARISON_BINARY_OPERATORS: [ '==', '===', '!=', '!==', 'in', 'instanceof' ],
     BOOLEAN_BINARY_OPERATORS: [ '==', '===', '!=', '!==', 'in', 'instanceof', '>', '<', '>=', '<=' ],
     NUMBER_BINARY_OPERATORS: [ '-', '/', '%', '*', '**', '&', '|', '>>', '>>>', '<<', '^' ],
     BINARY_OPERATORS: 
      [ '+',
        '-',
        '/',
        '%',
        '*',
        '**',
        '&',
        '|',
        '>>',
        '>>>',
        '<<',
        '^',
        '==',
        '===',
        '!=',
        '!==',
        'in',
        'instanceof',
        '>',
        '<',
        '>=',
        '<=' ],
     BOOLEAN_UNARY_OPERATORS: [ 'delete', '!' ],
     NUMBER_UNARY_OPERATORS: [ '+', '-', '++', '--', '~' ],
     STRING_UNARY_OPERATORS: [ 'typeof' ],
     UNARY_OPERATORS: [ 'void', 'delete', '!', '+', '-', '++', '--', '~', 'typeof' ],
     INHERIT_KEYS: { optional: [Object], force: [Object] },
     BLOCK_SCOPED_SYMBOL: Symbol(var used to be block scoped),
     NOT_LOCAL_BINDING: Symbol(should not be considered a local binding),
     VISITOR_KEYS: 
      { ArrayExpression: [Object],
        AssignmentExpression: [Object],
        BinaryExpression: [Object],
        Directive: [Object],
        DirectiveLiteral: [],
        BlockStatement: [Object],
        BreakStatement: [Object],
        CallExpression: [Object],
        CatchClause: [Object],
        ConditionalExpression: [Object],
        ContinueStatement: [Object],
        DebuggerStatement: [],
        DoWhileStatement: [Object],
        EmptyStatement: [],
        ExpressionStatement: [Object],
        File: [Object],
        ForInStatement: [Object],
        ForStatement: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        Identifier: [Object],
        IfStatement: [Object],
        LabeledStatement: [Object],
        StringLiteral: [],
        NumericLiteral: [],
        NullLiteral: [],
        BooleanLiteral: [],
        RegExpLiteral: [],
        LogicalExpression: [Object],
        MemberExpression: [Object],
        NewExpression: [Object],
        Program: [Object],
        ObjectExpression: [Object],
        ObjectMethod: [Object],
        ObjectProperty: [Object],
        RestElement: [Object],
        ReturnStatement: [Object],
        SequenceExpression: [Object],
        SwitchCase: [Object],
        SwitchStatement: [Object],
        ThisExpression: [],
        ThrowStatement: [Object],
        TryStatement: [Object],
        UnaryExpression: [Object],
        UpdateExpression: [Object],
        VariableDeclaration: [Object],
        VariableDeclarator: [Object],
        WhileStatement: [Object],
        WithStatement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ArrowFunctionExpression: [Object],
        ClassBody: [Object],
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ExportSpecifier: [Object],
        ForOfStatement: [Object],
        ImportDeclaration: [Object],
        ImportDefaultSpecifier: [Object],
        ImportNamespaceSpecifier: [Object],
        ImportSpecifier: [Object],
        MetaProperty: [Object],
        ClassMethod: [Object],
        ObjectPattern: [Object],
        SpreadElement: [Object],
        Super: [],
        TaggedTemplateExpression: [Object],
        TemplateElement: [],
        TemplateLiteral: [Object],
        YieldExpression: [Object],
        AnyTypeAnnotation: [],
        ArrayTypeAnnotation: [Object],
        BooleanTypeAnnotation: [],
        BooleanLiteralTypeAnnotation: [],
        NullLiteralTypeAnnotation: [],
        ClassImplements: [Object],
        ClassProperty: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        ExistentialTypeParam: [],
        FunctionTypeAnnotation: [Object],
        FunctionTypeParam: [Object],
        GenericTypeAnnotation: [Object],
        InterfaceExtends: [Object],
        InterfaceDeclaration: [Object],
        IntersectionTypeAnnotation: [Object],
        MixedTypeAnnotation: [],
        NullableTypeAnnotation: [Object],
        NumericLiteralTypeAnnotation: [],
        NumberTypeAnnotation: [],
        StringLiteralTypeAnnotation: [],
        StringTypeAnnotation: [],
        ThisTypeAnnotation: [],
        TupleTypeAnnotation: [Object],
        TypeofTypeAnnotation: [Object],
        TypeAlias: [Object],
        TypeAnnotation: [Object],
        TypeCastExpression: [Object],
        TypeParameterDeclaration: [Object],
        TypeParameterInstantiation: [Object],
        ObjectTypeAnnotation: [Object],
        ObjectTypeCallProperty: [Object],
        ObjectTypeIndexer: [Object],
        ObjectTypeProperty: [Object],
        QualifiedTypeIdentifier: [Object],
        UnionTypeAnnotation: [Object],
        VoidTypeAnnotation: [],
        JSXAttribute: [Object],
        JSXClosingElement: [Object],
        JSXElement: [Object],
        JSXEmptyExpression: [],
        JSXExpressionContainer: [Object],
        JSXIdentifier: [],
        JSXMemberExpression: [Object],
        JSXNamespacedName: [Object],
        JSXOpeningElement: [Object],
        JSXSpreadAttribute: [Object],
        JSXText: [],
        Noop: [],
        ParenthesizedExpression: [Object],
        AwaitExpression: [Object],
        BindExpression: [Object],
        Decorator: [Object],
        DoExpression: [Object],
        ExportDefaultSpecifier: [Object],
        ExportNamespaceSpecifier: [Object],
        RestProperty: [Object],
        SpreadProperty: [Object] },
     ALIAS_KEYS: 
      { ArrayExpression: [Object],
        AssignmentExpression: [Object],
        BinaryExpression: [Object],
        Directive: [],
        DirectiveLiteral: [],
        BlockStatement: [Object],
        BreakStatement: [Object],
        CallExpression: [Object],
        CatchClause: [Object],
        ConditionalExpression: [Object],
        ContinueStatement: [Object],
        DebuggerStatement: [Object],
        DoWhileStatement: [Object],
        EmptyStatement: [Object],
        ExpressionStatement: [Object],
        File: [],
        ForInStatement: [Object],
        ForStatement: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        Identifier: [Object],
        IfStatement: [Object],
        LabeledStatement: [Object],
        StringLiteral: [Object],
        NumericLiteral: [Object],
        NullLiteral: [Object],
        BooleanLiteral: [Object],
        RegExpLiteral: [Object],
        LogicalExpression: [Object],
        MemberExpression: [Object],
        NewExpression: [Object],
        Program: [Object],
        ObjectExpression: [Object],
        ObjectMethod: [Object],
        ObjectProperty: [Object],
        RestElement: [Object],
        ReturnStatement: [Object],
        SequenceExpression: [Object],
        SwitchCase: [],
        SwitchStatement: [Object],
        ThisExpression: [Object],
        ThrowStatement: [Object],
        TryStatement: [Object],
        UnaryExpression: [Object],
        UpdateExpression: [Object],
        VariableDeclaration: [Object],
        VariableDeclarator: [],
        WhileStatement: [Object],
        WithStatement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ArrowFunctionExpression: [Object],
        ClassBody: [],
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ExportSpecifier: [Object],
        ForOfStatement: [Object],
        ImportDeclaration: [Object],
        ImportDefaultSpecifier: [Object],
        ImportNamespaceSpecifier: [Object],
        ImportSpecifier: [Object],
        MetaProperty: [Object],
        ClassMethod: [Object],
        ObjectPattern: [Object],
        SpreadElement: [Object],
        Super: [Object],
        TaggedTemplateExpression: [Object],
        TemplateElement: [],
        TemplateLiteral: [Object],
        YieldExpression: [Object],
        AnyTypeAnnotation: [Object],
        ArrayTypeAnnotation: [Object],
        BooleanTypeAnnotation: [Object],
        BooleanLiteralTypeAnnotation: [Object],
        NullLiteralTypeAnnotation: [Object],
        ClassImplements: [Object],
        ClassProperty: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        ExistentialTypeParam: [Object],
        FunctionTypeAnnotation: [Object],
        FunctionTypeParam: [Object],
        GenericTypeAnnotation: [Object],
        InterfaceExtends: [Object],
        InterfaceDeclaration: [Object],
        IntersectionTypeAnnotation: [Object],
        MixedTypeAnnotation: [Object],
        NullableTypeAnnotation: [Object],
        NumericLiteralTypeAnnotation: [Object],
        NumberTypeAnnotation: [Object],
        StringLiteralTypeAnnotation: [Object],
        StringTypeAnnotation: [Object],
        ThisTypeAnnotation: [Object],
        TupleTypeAnnotation: [Object],
        TypeofTypeAnnotation: [Object],
        TypeAlias: [Object],
        TypeAnnotation: [Object],
        TypeCastExpression: [Object],
        TypeParameterDeclaration: [Object],
        TypeParameterInstantiation: [Object],
        ObjectTypeAnnotation: [Object],
        ObjectTypeCallProperty: [Object],
        ObjectTypeIndexer: [Object],
        ObjectTypeProperty: [Object],
        QualifiedTypeIdentifier: [Object],
        UnionTypeAnnotation: [Object],
        VoidTypeAnnotation: [Object],
        JSXAttribute: [Object],
        JSXClosingElement: [Object],
        JSXElement: [Object],
        JSXEmptyExpression: [Object],
        JSXExpressionContainer: [Object],
        JSXIdentifier: [Object],
        JSXMemberExpression: [Object],
        JSXNamespacedName: [Object],
        JSXOpeningElement: [Object],
        JSXSpreadAttribute: [Object],
        JSXText: [Object],
        Noop: [],
        ParenthesizedExpression: [Object],
        AwaitExpression: [Object],
        BindExpression: [Object],
        Decorator: [],
        DoExpression: [Object],
        ExportDefaultSpecifier: [Object],
        ExportNamespaceSpecifier: [Object],
        RestProperty: [Object],
        SpreadProperty: [Object] },
     NODE_FIELDS: 
      { ArrayExpression: [Object],
        AssignmentExpression: [Object],
        BinaryExpression: [Object],
        Directive: [Object],
        DirectiveLiteral: [Object],
        BlockStatement: [Object],
        BreakStatement: [Object],
        CallExpression: [Object],
        CatchClause: [Object],
        ConditionalExpression: [Object],
        ContinueStatement: [Object],
        DebuggerStatement: {},
        DoWhileStatement: [Object],
        EmptyStatement: {},
        ExpressionStatement: [Object],
        File: [Object],
        ForInStatement: [Object],
        ForStatement: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        Identifier: [Object],
        IfStatement: [Object],
        LabeledStatement: [Object],
        StringLiteral: [Object],
        NumericLiteral: [Object],
        NullLiteral: {},
        BooleanLiteral: [Object],
        RegExpLiteral: [Object],
        LogicalExpression: [Object],
        MemberExpression: [Object],
        NewExpression: [Object],
        Program: [Object],
        ObjectExpression: [Object],
        ObjectMethod: [Object],
        ObjectProperty: [Object],
        RestElement: [Object],
        ReturnStatement: [Object],
        SequenceExpression: [Object],
        SwitchCase: [Object],
        SwitchStatement: [Object],
        ThisExpression: {},
        ThrowStatement: [Object],
        TryStatement: [Object],
        UnaryExpression: [Object],
        UpdateExpression: [Object],
        VariableDeclaration: [Object],
        VariableDeclarator: [Object],
        WhileStatement: [Object],
        WithStatement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ArrowFunctionExpression: [Object],
        ClassBody: [Object],
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ExportSpecifier: [Object],
        ForOfStatement: [Object],
        ImportDeclaration: [Object],
        ImportDefaultSpecifier: [Object],
        ImportNamespaceSpecifier: [Object],
        ImportSpecifier: [Object],
        MetaProperty: [Object],
        ClassMethod: [Object],
        ObjectPattern: [Object],
        SpreadElement: [Object],
        Super: {},
        TaggedTemplateExpression: [Object],
        TemplateElement: [Object],
        TemplateLiteral: [Object],
        YieldExpression: [Object],
        AnyTypeAnnotation: {},
        ArrayTypeAnnotation: [Object],
        BooleanTypeAnnotation: {},
        BooleanLiteralTypeAnnotation: {},
        NullLiteralTypeAnnotation: {},
        ClassImplements: [Object],
        ClassProperty: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        ExistentialTypeParam: {},
        FunctionTypeAnnotation: [Object],
        FunctionTypeParam: [Object],
        GenericTypeAnnotation: [Object],
        InterfaceExtends: [Object],
        InterfaceDeclaration: [Object],
        IntersectionTypeAnnotation: [Object],
        MixedTypeAnnotation: {},
        NullableTypeAnnotation: [Object],
        NumericLiteralTypeAnnotation: {},
        NumberTypeAnnotation: {},
        StringLiteralTypeAnnotation: {},
        StringTypeAnnotation: {},
        ThisTypeAnnotation: {},
        TupleTypeAnnotation: [Object],
        TypeofTypeAnnotation: [Object],
        TypeAlias: [Object],
        TypeAnnotation: [Object],
        TypeCastExpression: [Object],
        TypeParameterDeclaration: [Object],
        TypeParameterInstantiation: [Object],
        ObjectTypeAnnotation: [Object],
        ObjectTypeCallProperty: [Object],
        ObjectTypeIndexer: [Object],
        ObjectTypeProperty: [Object],
        QualifiedTypeIdentifier: [Object],
        UnionTypeAnnotation: [Object],
        VoidTypeAnnotation: {},
        JSXAttribute: [Object],
        JSXClosingElement: [Object],
        JSXElement: [Object],
        JSXEmptyExpression: {},
        JSXExpressionContainer: [Object],
        JSXIdentifier: [Object],
        JSXMemberExpression: [Object],
        JSXNamespacedName: [Object],
        JSXOpeningElement: [Object],
        JSXSpreadAttribute: [Object],
        JSXText: [Object],
        Noop: {},
        ParenthesizedExpression: [Object],
        AwaitExpression: [Object],
        BindExpression: [Object],
        Decorator: [Object],
        DoExpression: [Object],
        ExportDefaultSpecifier: [Object],
        ExportNamespaceSpecifier: [Object],
        RestProperty: [Object],
        SpreadProperty: [Object] },
     BUILDER_KEYS: 
      { ArrayExpression: [Object],
        AssignmentExpression: [Object],
        BinaryExpression: [Object],
        Directive: [Object],
        DirectiveLiteral: [Object],
        BlockStatement: [Object],
        BreakStatement: [Object],
        CallExpression: [Object],
        CatchClause: [Object],
        ConditionalExpression: [Object],
        ContinueStatement: [Object],
        DebuggerStatement: [],
        DoWhileStatement: [Object],
        EmptyStatement: [],
        ExpressionStatement: [Object],
        File: [Object],
        ForInStatement: [Object],
        ForStatement: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        Identifier: [Object],
        IfStatement: [Object],
        LabeledStatement: [Object],
        StringLiteral: [Object],
        NumericLiteral: [Object],
        NullLiteral: [],
        BooleanLiteral: [Object],
        RegExpLiteral: [Object],
        LogicalExpression: [Object],
        MemberExpression: [Object],
        NewExpression: [Object],
        Program: [Object],
        ObjectExpression: [Object],
        ObjectMethod: [Object],
        ObjectProperty: [Object],
        RestElement: [Object],
        ReturnStatement: [Object],
        SequenceExpression: [Object],
        SwitchCase: [Object],
        SwitchStatement: [Object],
        ThisExpression: [],
        ThrowStatement: [Object],
        TryStatement: [Object],
        UnaryExpression: [Object],
        UpdateExpression: [Object],
        VariableDeclaration: [Object],
        VariableDeclarator: [Object],
        WhileStatement: [Object],
        WithStatement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ArrowFunctionExpression: [Object],
        ClassBody: [Object],
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ExportSpecifier: [Object],
        ForOfStatement: [Object],
        ImportDeclaration: [Object],
        ImportDefaultSpecifier: [Object],
        ImportNamespaceSpecifier: [Object],
        ImportSpecifier: [Object],
        MetaProperty: [Object],
        ClassMethod: [Object],
        ObjectPattern: [Object],
        SpreadElement: [Object],
        Super: [],
        TaggedTemplateExpression: [Object],
        TemplateElement: [Object],
        TemplateLiteral: [Object],
        YieldExpression: [Object],
        AnyTypeAnnotation: [],
        ArrayTypeAnnotation: [Object],
        BooleanTypeAnnotation: [],
        BooleanLiteralTypeAnnotation: [],
        NullLiteralTypeAnnotation: [],
        ClassImplements: [Object],
        ClassProperty: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        ExistentialTypeParam: [],
        FunctionTypeAnnotation: [Object],
        FunctionTypeParam: [Object],
        GenericTypeAnnotation: [Object],
        InterfaceExtends: [Object],
        InterfaceDeclaration: [Object],
        IntersectionTypeAnnotation: [Object],
        MixedTypeAnnotation: [],
        NullableTypeAnnotation: [Object],
        NumericLiteralTypeAnnotation: [],
        NumberTypeAnnotation: [],
        StringLiteralTypeAnnotation: [],
        StringTypeAnnotation: [],
        ThisTypeAnnotation: [],
        TupleTypeAnnotation: [Object],
        TypeofTypeAnnotation: [Object],
        TypeAlias: [Object],
        TypeAnnotation: [Object],
        TypeCastExpression: [Object],
        TypeParameterDeclaration: [Object],
        TypeParameterInstantiation: [Object],
        ObjectTypeAnnotation: [Object],
        ObjectTypeCallProperty: [Object],
        ObjectTypeIndexer: [Object],
        ObjectTypeProperty: [Object],
        QualifiedTypeIdentifier: [Object],
        UnionTypeAnnotation: [Object],
        VoidTypeAnnotation: [],
        JSXAttribute: [Object],
        JSXClosingElement: [Object],
        JSXElement: [Object],
        JSXEmptyExpression: [],
        JSXExpressionContainer: [Object],
        JSXIdentifier: [Object],
        JSXMemberExpression: [Object],
        JSXNamespacedName: [Object],
        JSXOpeningElement: [Object],
        JSXSpreadAttribute: [Object],
        JSXText: [Object],
        Noop: [],
        ParenthesizedExpression: [Object],
        AwaitExpression: [Object],
        BindExpression: [Object],
        Decorator: [Object],
        DoExpression: [Object],
        ExportDefaultSpecifier: [Object],
        ExportNamespaceSpecifier: [Object],
        RestProperty: [Object],
        SpreadProperty: [Object] },
     DEPRECATED_KEYS: 
      { NumberLiteral: 'NumericLiteral',
        RegexLiteral: 'RegExpLiteral' },
     react: 
      { __esModule: true,
        isCompatTag: [Function: isCompatTag],
        buildChildren: [Function: buildChildren],
        isReactComponent: [Function] },
     isArrayExpression: [Function],
     assertArrayExpression: [Function],
     isAssignmentExpression: [Function],
     assertAssignmentExpression: [Function],
     isBinaryExpression: [Function],
     assertBinaryExpression: [Function],
     isDirective: [Function],
     assertDirective: [Function],
     isDirectiveLiteral: [Function],
     assertDirectiveLiteral: [Function],
     isBlockStatement: [Function],
     assertBlockStatement: [Function],
     isBreakStatement: [Function],
     assertBreakStatement: [Function],
     isCallExpression: [Function],
     assertCallExpression: [Function],
     isCatchClause: [Function],
     assertCatchClause: [Function],
     isConditionalExpression: [Function],
     assertConditionalExpression: [Function],
     isContinueStatement: [Function],
     assertContinueStatement: [Function],
     isDebuggerStatement: [Function],
     assertDebuggerStatement: [Function],
     isDoWhileStatement: [Function],
     assertDoWhileStatement: [Function],
     isEmptyStatement: [Function],
     assertEmptyStatement: [Function],
     isExpressionStatement: [Function],
     assertExpressionStatement: [Function],
     isFile: [Function],
     assertFile: [Function],
     isForInStatement: [Function],
     assertForInStatement: [Function],
     isForStatement: [Function],
     assertForStatement: [Function],
     isFunctionDeclaration: [Function],
     assertFunctionDeclaration: [Function],
     isFunctionExpression: [Function],
     assertFunctionExpression: [Function],
     isIdentifier: [Function],
     assertIdentifier: [Function],
     isIfStatement: [Function],
     assertIfStatement: [Function],
     isLabeledStatement: [Function],
     assertLabeledStatement: [Function],
     isStringLiteral: [Function],
     assertStringLiteral: [Function],
     isNumericLiteral: [Function],
     assertNumericLiteral: [Function],
     isNullLiteral: [Function],
     assertNullLiteral: [Function],
     isBooleanLiteral: [Function],
     assertBooleanLiteral: [Function],
     isRegExpLiteral: [Function],
     assertRegExpLiteral: [Function],
     isLogicalExpression: [Function],
     assertLogicalExpression: [Function],
     isMemberExpression: [Function],
     assertMemberExpression: [Function],
     isNewExpression: [Function],
     assertNewExpression: [Function],
     isProgram: [Function],
     assertProgram: [Function],
     isObjectExpression: [Function],
     assertObjectExpression: [Function],
     isObjectMethod: [Function],
     assertObjectMethod: [Function],
     isObjectProperty: [Function],
     assertObjectProperty: [Function],
     isRestElement: [Function],
     assertRestElement: [Function],
     isReturnStatement: [Function],
     assertReturnStatement: [Function],
     isSequenceExpression: [Function],
     assertSequenceExpression: [Function],
     isSwitchCase: [Function],
     assertSwitchCase: [Function],
     isSwitchStatement: [Function],
     assertSwitchStatement: [Function],
     isThisExpression: [Function],
     assertThisExpression: [Function],
     isThrowStatement: [Function],
     assertThrowStatement: [Function],
     isTryStatement: [Function],
     assertTryStatement: [Function],
     isUnaryExpression: [Function],
     assertUnaryExpression: [Function],
     isUpdateExpression: [Function],
     assertUpdateExpression: [Function],
     isVariableDeclaration: [Function],
     assertVariableDeclaration: [Function],
     isVariableDeclarator: [Function],
     assertVariableDeclarator: [Function],
     isWhileStatement: [Function],
     assertWhileStatement: [Function],
     isWithStatement: [Function],
     assertWithStatement: [Function],
     isAssignmentPattern: [Function],
     assertAssignmentPattern: [Function],
     isArrayPattern: [Function],
     assertArrayPattern: [Function],
     isArrowFunctionExpression: [Function],
     assertArrowFunctionExpression: [Function],
     isClassBody: [Function],
     assertClassBody: [Function],
     isClassDeclaration: [Function],
     assertClassDeclaration: [Function],
     isClassExpression: [Function],
     assertClassExpression: [Function],
     isExportAllDeclaration: [Function],
     assertExportAllDeclaration: [Function],
     isExportDefaultDeclaration: [Function],
     assertExportDefaultDeclaration: [Function],
     isExportNamedDeclaration: [Function],
     assertExportNamedDeclaration: [Function],
     isExportSpecifier: [Function],
     assertExportSpecifier: [Function],
     isForOfStatement: [Function],
     assertForOfStatement: [Function],
     isImportDeclaration: [Function],
     assertImportDeclaration: [Function],
     isImportDefaultSpecifier: [Function],
     assertImportDefaultSpecifier: [Function],
     isImportNamespaceSpecifier: [Function],
     assertImportNamespaceSpecifier: [Function],
     isImportSpecifier: [Function],
     assertImportSpecifier: [Function],
     isMetaProperty: [Function],
     assertMetaProperty: [Function],
     isClassMethod: [Function],
     assertClassMethod: [Function],
     isObjectPattern: [Function],
     assertObjectPattern: [Function],
     isSpreadElement: [Function],
     assertSpreadElement: [Function],
     isSuper: [Function],
     assertSuper: [Function],
     isTaggedTemplateExpression: [Function],
     assertTaggedTemplateExpression: [Function],
     isTemplateElement: [Function],
     assertTemplateElement: [Function],
     isTemplateLiteral: [Function],
     assertTemplateLiteral: [Function],
     isYieldExpression: [Function],
     assertYieldExpression: [Function],
     isAnyTypeAnnotation: [Function],
     assertAnyTypeAnnotation: [Function],
     isArrayTypeAnnotation: [Function],
     assertArrayTypeAnnotation: [Function],
     isBooleanTypeAnnotation: [Function],
     assertBooleanTypeAnnotation: [Function],
     isBooleanLiteralTypeAnnotation: [Function],
     assertBooleanLiteralTypeAnnotation: [Function],
     isNullLiteralTypeAnnotation: [Function],
     assertNullLiteralTypeAnnotation: [Function],
     isClassImplements: [Function],
     assertClassImplements: [Function],
     isClassProperty: [Function],
     assertClassProperty: [Function],
     isDeclareClass: [Function],
     assertDeclareClass: [Function],
     isDeclareFunction: [Function],
     assertDeclareFunction: [Function],
     isDeclareInterface: [Function],
     assertDeclareInterface: [Function],
     isDeclareModule: [Function],
     assertDeclareModule: [Function],
     isDeclareTypeAlias: [Function],
     assertDeclareTypeAlias: [Function],
     isDeclareVariable: [Function],
     assertDeclareVariable: [Function],
     isExistentialTypeParam: [Function],
     assertExistentialTypeParam: [Function],
     isFunctionTypeAnnotation: [Function],
     assertFunctionTypeAnnotation: [Function],
     isFunctionTypeParam: [Function],
     assertFunctionTypeParam: [Function],
     isGenericTypeAnnotation: [Function],
     assertGenericTypeAnnotation: [Function],
     isInterfaceExtends: [Function],
     assertInterfaceExtends: [Function],
     isInterfaceDeclaration: [Function],
     assertInterfaceDeclaration: [Function],
     isIntersectionTypeAnnotation: [Function],
     assertIntersectionTypeAnnotation: [Function],
     isMixedTypeAnnotation: [Function],
     assertMixedTypeAnnotation: [Function],
     isNullableTypeAnnotation: [Function],
     assertNullableTypeAnnotation: [Function],
     isNumericLiteralTypeAnnotation: [Function],
     assertNumericLiteralTypeAnnotation: [Function],
     isNumberTypeAnnotation: [Function],
     assertNumberTypeAnnotation: [Function],
     isStringLiteralTypeAnnotation: [Function],
     assertStringLiteralTypeAnnotation: [Function],
     isStringTypeAnnotation: [Function],
     assertStringTypeAnnotation: [Function],
     isThisTypeAnnotation: [Function],
     assertThisTypeAnnotation: [Function],
     isTupleTypeAnnotation: [Function],
     assertTupleTypeAnnotation: [Function],
     isTypeofTypeAnnotation: [Function],
     assertTypeofTypeAnnotation: [Function],
     isTypeAlias: [Function],
     assertTypeAlias: [Function],
     isTypeAnnotation: [Function],
     assertTypeAnnotation: [Function],
     isTypeCastExpression: [Function],
     assertTypeCastExpression: [Function],
     isTypeParameterDeclaration: [Function],
     assertTypeParameterDeclaration: [Function],
     isTypeParameterInstantiation: [Function],
     assertTypeParameterInstantiation: [Function],
     isObjectTypeAnnotation: [Function],
     assertObjectTypeAnnotation: [Function],
     isObjectTypeCallProperty: [Function],
     assertObjectTypeCallProperty: [Function],
     isObjectTypeIndexer: [Function],
     assertObjectTypeIndexer: [Function],
     isObjectTypeProperty: [Function],
     assertObjectTypeProperty: [Function],
     isQualifiedTypeIdentifier: [Function],
     assertQualifiedTypeIdentifier: [Function],
     isUnionTypeAnnotation: [Function],
     assertUnionTypeAnnotation: [Function],
     isVoidTypeAnnotation: [Function],
     assertVoidTypeAnnotation: [Function],
     isJSXAttribute: [Function],
     assertJSXAttribute: [Function],
     isJSXClosingElement: [Function],
     assertJSXClosingElement: [Function],
     isJSXElement: [Function],
     assertJSXElement: [Function],
     isJSXEmptyExpression: [Function],
     assertJSXEmptyExpression: [Function],
     isJSXExpressionContainer: [Function],
     assertJSXExpressionContainer: [Function],
     isJSXIdentifier: [Function],
     assertJSXIdentifier: [Function],
     isJSXMemberExpression: [Function],
     assertJSXMemberExpression: [Function],
     isJSXNamespacedName: [Function],
     assertJSXNamespacedName: [Function],
     isJSXOpeningElement: [Function],
     assertJSXOpeningElement: [Function],
     isJSXSpreadAttribute: [Function],
     assertJSXSpreadAttribute: [Function],
     isJSXText: [Function],
     assertJSXText: [Function],
     isNoop: [Function],
     assertNoop: [Function],
     isParenthesizedExpression: [Function],
     assertParenthesizedExpression: [Function],
     isAwaitExpression: [Function],
     assertAwaitExpression: [Function],
     isBindExpression: [Function],
     assertBindExpression: [Function],
     isDecorator: [Function],
     assertDecorator: [Function],
     isDoExpression: [Function],
     assertDoExpression: [Function],
     isExportDefaultSpecifier: [Function],
     assertExportDefaultSpecifier: [Function],
     isExportNamespaceSpecifier: [Function],
     assertExportNamespaceSpecifier: [Function],
     isRestProperty: [Function],
     assertRestProperty: [Function],
     isSpreadProperty: [Function],
     assertSpreadProperty: [Function],
     FLIPPED_ALIAS_KEYS: 
      { Expression: [Object],
        Binary: [Object],
        Scopable: [Object],
        BlockParent: [Object],
        Block: [Object],
        Statement: [Object],
        Terminatorless: [Object],
        CompletionStatement: [Object],
        Conditional: [Object],
        Loop: [Object],
        While: [Object],
        ExpressionWrapper: [Object],
        For: [Object],
        ForXStatement: [Object],
        Function: [Object],
        FunctionParent: [Object],
        Pureish: [Object],
        Declaration: [Object],
        LVal: [Object],
        Literal: [Object],
        Immutable: [Object],
        UserWhitespacable: [Object],
        Method: [Object],
        ObjectMember: [Object],
        Property: [Object],
        UnaryLike: [Object],
        Pattern: [Object],
        Class: [Object],
        ModuleDeclaration: [Object],
        ExportDeclaration: [Object],
        ModuleSpecifier: [Object],
        Flow: [Object],
        FlowBaseAnnotation: [Object],
        FlowDeclaration: [Object],
        JSX: [Object] },
     EXPRESSION_TYPES: 
      [ 'ArrayExpression',
        'AssignmentExpression',
        'BinaryExpression',
        'CallExpression',
        'ConditionalExpression',
        'FunctionExpression',
        'Identifier',
        'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'RegExpLiteral',
        'LogicalExpression',
        'MemberExpression',
        'NewExpression',
        'ObjectExpression',
        'SequenceExpression',
        'ThisExpression',
        'UnaryExpression',
        'UpdateExpression',
        'ArrowFunctionExpression',
        'ClassExpression',
        'MetaProperty',
        'Super',
        'TaggedTemplateExpression',
        'TemplateLiteral',
        'YieldExpression',
        'TypeCastExpression',
        'JSXElement',
        'JSXEmptyExpression',
        'JSXIdentifier',
        'JSXMemberExpression',
        'ParenthesizedExpression',
        'AwaitExpression',
        'BindExpression',
        'DoExpression' ],
     isExpression: [Function],
     assertExpression: [Function],
     BINARY_TYPES: [ 'BinaryExpression', 'LogicalExpression' ],
     isBinary: [Function],
     assertBinary: [Function],
     SCOPABLE_TYPES: 
      [ 'BlockStatement',
        'CatchClause',
        'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'SwitchStatement',
        'WhileStatement',
        'ArrowFunctionExpression',
        'ClassDeclaration',
        'ClassExpression',
        'ForOfStatement',
        'ClassMethod' ],
     isScopable: [Function],
     assertScopable: [Function],
     BLOCKPARENT_TYPES: 
      [ 'BlockStatement',
        'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'SwitchStatement',
        'WhileStatement',
        'ArrowFunctionExpression',
        'ForOfStatement',
        'ClassMethod' ],
     isBlockParent: [Function],
     assertBlockParent: [Function],
     BLOCK_TYPES: [ 'BlockStatement', 'Program' ],
     isBlock: [Function],
     assertBlock: [Function],
     STATEMENT_TYPES: 
      [ 'BlockStatement',
        'BreakStatement',
        'ContinueStatement',
        'DebuggerStatement',
        'DoWhileStatement',
        'EmptyStatement',
        'ExpressionStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'IfStatement',
        'LabeledStatement',
        'ReturnStatement',
        'SwitchStatement',
        'ThrowStatement',
        'TryStatement',
        'VariableDeclaration',
        'WhileStatement',
        'WithStatement',
        'ClassDeclaration',
        'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ForOfStatement',
        'ImportDeclaration',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'InterfaceDeclaration',
        'TypeAlias' ],
     isStatement: [Function],
     assertStatement: [Function],
     TERMINATORLESS_TYPES: 
      [ 'BreakStatement',
        'ContinueStatement',
        'ReturnStatement',
        'ThrowStatement',
        'YieldExpression',
        'AwaitExpression' ],
     isTerminatorless: [Function],
     assertTerminatorless: [Function],
     COMPLETIONSTATEMENT_TYPES: 
      [ 'BreakStatement',
        'ContinueStatement',
        'ReturnStatement',
        'ThrowStatement' ],
     isCompletionStatement: [Function],
     assertCompletionStatement: [Function],
     CONDITIONAL_TYPES: [ 'ConditionalExpression', 'IfStatement' ],
     isConditional: [Function],
     assertConditional: [Function],
     LOOP_TYPES: 
      [ 'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'WhileStatement',
        'ForOfStatement' ],
     isLoop: [Function],
     assertLoop: [Function],
     WHILE_TYPES: [ 'DoWhileStatement', 'WhileStatement' ],
     isWhile: [Function],
     assertWhile: [Function],
     EXPRESSIONWRAPPER_TYPES: 
      [ 'ExpressionStatement',
        'TypeCastExpression',
        'ParenthesizedExpression' ],
     isExpressionWrapper: [Function],
     assertExpressionWrapper: [Function],
     FOR_TYPES: [ 'ForInStatement', 'ForStatement', 'ForOfStatement' ],
     isFor: [Function],
     assertFor: [Function],
     FORXSTATEMENT_TYPES: [ 'ForInStatement', 'ForOfStatement' ],
     isForXStatement: [Function],
     assertForXStatement: [Function],
     FUNCTION_TYPES: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'ObjectMethod',
        'ArrowFunctionExpression',
        'ClassMethod' ],
     isFunction: [Function],
     assertFunction: [Function],
     FUNCTIONPARENT_TYPES: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'ArrowFunctionExpression',
        'ClassMethod' ],
     isFunctionParent: [Function],
     assertFunctionParent: [Function],
     PUREISH_TYPES: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'ArrowFunctionExpression',
        'ClassDeclaration',
        'ClassExpression' ],
     isPureish: [Function],
     assertPureish: [Function],
     DECLARATION_TYPES: 
      [ 'FunctionDeclaration',
        'VariableDeclaration',
        'ClassDeclaration',
        'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ImportDeclaration',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'InterfaceDeclaration',
        'TypeAlias' ],
     isDeclaration: [Function],
     assertDeclaration: [Function],
     LVAL_TYPES: 
      [ 'Identifier',
        'MemberExpression',
        'RestElement',
        'AssignmentPattern',
        'ArrayPattern',
        'ObjectPattern' ],
     isLVal: [Function],
     assertLVal: [Function],
     LITERAL_TYPES: 
      [ 'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'RegExpLiteral',
        'TemplateLiteral' ],
     isLiteral: [Function],
     assertLiteral: [Function],
     IMMUTABLE_TYPES: 
      [ 'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'JSXAttribute',
        'JSXClosingElement',
        'JSXElement',
        'JSXExpressionContainer',
        'JSXOpeningElement' ],
     isImmutable: [Function],
     assertImmutable: [Function],
     USERWHITESPACABLE_TYPES: 
      [ 'ObjectMethod',
        'ObjectProperty',
        'ObjectTypeCallProperty',
        'ObjectTypeIndexer',
        'ObjectTypeProperty' ],
     isUserWhitespacable: [Function],
     assertUserWhitespacable: [Function],
     METHOD_TYPES: [ 'ObjectMethod', 'ClassMethod' ],
     isMethod: [Function],
     assertMethod: [Function],
     OBJECTMEMBER_TYPES: [ 'ObjectMethod', 'ObjectProperty' ],
     isObjectMember: [Function],
     assertObjectMember: [Function],
     PROPERTY_TYPES: [ 'ObjectProperty', 'ClassProperty' ],
     isProperty: [Function],
     assertProperty: [Function],
     UNARYLIKE_TYPES: 
      [ 'UnaryExpression',
        'SpreadElement',
        'RestProperty',
        'SpreadProperty' ],
     isUnaryLike: [Function],
     assertUnaryLike: [Function],
     PATTERN_TYPES: [ 'AssignmentPattern', 'ArrayPattern', 'ObjectPattern' ],
     isPattern: [Function],
     assertPattern: [Function],
     CLASS_TYPES: [ 'ClassDeclaration', 'ClassExpression' ],
     isClass: [Function],
     assertClass: [Function],
     MODULEDECLARATION_TYPES: 
      [ 'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ImportDeclaration' ],
     isModuleDeclaration: [Function],
     assertModuleDeclaration: [Function],
     EXPORTDECLARATION_TYPES: 
      [ 'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration' ],
     isExportDeclaration: [Function],
     assertExportDeclaration: [Function],
     MODULESPECIFIER_TYPES: 
      [ 'ExportSpecifier',
        'ImportDefaultSpecifier',
        'ImportNamespaceSpecifier',
        'ImportSpecifier',
        'ExportDefaultSpecifier',
        'ExportNamespaceSpecifier' ],
     isModuleSpecifier: [Function],
     assertModuleSpecifier: [Function],
     FLOW_TYPES: 
      [ 'AnyTypeAnnotation',
        'ArrayTypeAnnotation',
        'BooleanTypeAnnotation',
        'BooleanLiteralTypeAnnotation',
        'NullLiteralTypeAnnotation',
        'ClassImplements',
        'ClassProperty',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'ExistentialTypeParam',
        'FunctionTypeAnnotation',
        'FunctionTypeParam',
        'GenericTypeAnnotation',
        'InterfaceExtends',
        'InterfaceDeclaration',
        'IntersectionTypeAnnotation',
        'MixedTypeAnnotation',
        'NullableTypeAnnotation',
        'NumericLiteralTypeAnnotation',
        'NumberTypeAnnotation',
        'StringLiteralTypeAnnotation',
        'StringTypeAnnotation',
        'ThisTypeAnnotation',
        'TupleTypeAnnotation',
        'TypeofTypeAnnotation',
        'TypeAlias',
        'TypeAnnotation',
        'TypeCastExpression',
        'TypeParameterDeclaration',
        'TypeParameterInstantiation',
        'ObjectTypeAnnotation',
        'ObjectTypeCallProperty',
        'ObjectTypeIndexer',
        'ObjectTypeProperty',
        'QualifiedTypeIdentifier',
        'UnionTypeAnnotation',
        'VoidTypeAnnotation' ],
     isFlow: [Function],
     assertFlow: [Function],
     FLOWBASEANNOTATION_TYPES: 
      [ 'AnyTypeAnnotation',
        'BooleanTypeAnnotation',
        'NullLiteralTypeAnnotation',
        'MixedTypeAnnotation',
        'NumberTypeAnnotation',
        'StringTypeAnnotation',
        'ThisTypeAnnotation',
        'VoidTypeAnnotation' ],
     isFlowBaseAnnotation: [Function],
     assertFlowBaseAnnotation: [Function],
     FLOWDECLARATION_TYPES: 
      [ 'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'InterfaceDeclaration',
        'TypeAlias' ],
     isFlowDeclaration: [Function],
     assertFlowDeclaration: [Function],
     JSX_TYPES: 
      [ 'JSXAttribute',
        'JSXClosingElement',
        'JSXElement',
        'JSXEmptyExpression',
        'JSXExpressionContainer',
        'JSXIdentifier',
        'JSXMemberExpression',
        'JSXNamespacedName',
        'JSXOpeningElement',
        'JSXSpreadAttribute',
        'JSXText' ],
     isJSX: [Function],
     assertJSX: [Function],
     TYPES: 
      [ 'ArrayExpression',
        'AssignmentExpression',
        'BinaryExpression',
        'Directive',
        'DirectiveLiteral',
        'BlockStatement',
        'BreakStatement',
        'CallExpression',
        'CatchClause',
        'ConditionalExpression',
        'ContinueStatement',
        'DebuggerStatement',
        'DoWhileStatement',
        'EmptyStatement',
        'ExpressionStatement',
        'File',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'FunctionExpression',
        'Identifier',
        'IfStatement',
        'LabeledStatement',
        'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'RegExpLiteral',
        'LogicalExpression',
        'MemberExpression',
        'NewExpression',
        'Program',
        'ObjectExpression',
        'ObjectMethod',
        'ObjectProperty',
        'RestElement',
        'ReturnStatement',
        'SequenceExpression',
        'SwitchCase',
        'SwitchStatement',
        'ThisExpression',
        'ThrowStatement',
        'TryStatement',
        'UnaryExpression',
        'UpdateExpression',
        'VariableDeclaration',
        'VariableDeclarator',
        'WhileStatement',
        'WithStatement',
        'AssignmentPattern',
        'ArrayPattern',
        'ArrowFunctionExpression',
        'ClassBody',
        'ClassDeclaration',
        'ClassExpression',
        'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ExportSpecifier',
        'ForOfStatement',
        'ImportDeclaration',
        'ImportDefaultSpecifier',
        'ImportNamespaceSpecifier',
        'ImportSpecifier',
        'MetaProperty',
        'ClassMethod',
        'ObjectPattern',
        'SpreadElement',
        'Super',
        'TaggedTemplateExpression',
        'TemplateElement',
        'TemplateLiteral',
        'YieldExpression',
        'AnyTypeAnnotation',
        'ArrayTypeAnnotation',
        'BooleanTypeAnnotation',
        'BooleanLiteralTypeAnnotation',
        'NullLiteralTypeAnnotation',
        'ClassImplements',
        'ClassProperty',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'ExistentialTypeParam',
        'FunctionTypeAnnotation',
        'FunctionTypeParam',
        'GenericTypeAnnotation',
        'InterfaceExtends',
        'InterfaceDeclaration',
        'IntersectionTypeAnnotation',
        'MixedTypeAnnotation',
        'NullableTypeAnnotation',
        'NumericLiteralTypeAnnotation',
        'NumberTypeAnnotation',
        'StringLiteralTypeAnnotation',
        'StringTypeAnnotation',
        'ThisTypeAnnotation',
        'TupleTypeAnnotation',
        'TypeofTypeAnnotation',
        'TypeAlias',
        'TypeAnnotation',
        'TypeCastExpression',
        'TypeParameterDeclaration',
        'TypeParameterInstantiation',
        'ObjectTypeAnnotation',
        'ObjectTypeCallProperty',
        'ObjectTypeIndexer',
        'ObjectTypeProperty',
        'QualifiedTypeIdentifier',
        'UnionTypeAnnotation',
        'VoidTypeAnnotation',
        'JSXAttribute',
        'JSXClosingElement',
        'JSXElement',
        'JSXEmptyExpression',
        'JSXExpressionContainer',
        'JSXIdentifier',
        'JSXMemberExpression',
        'JSXNamespacedName',
        'JSXOpeningElement',
        'JSXSpreadAttribute',
        'JSXText',
        'Noop',
        'ParenthesizedExpression',
        'AwaitExpression',
        'BindExpression',
        'Decorator',
        'DoExpression',
        'ExportDefaultSpecifier',
        'ExportNamespaceSpecifier',
        'RestProperty',
        'SpreadProperty',
        'Expression',
        'Binary',
        'Scopable',
        'BlockParent',
        'Block',
        'Statement',
        'Terminatorless',
        'CompletionStatement',
        'Conditional',
        'Loop',
        'While',
        'ExpressionWrapper',
        'For',
        'ForXStatement',
        'Function',
        'FunctionParent',
        'Pureish',
        'Declaration',
        'LVal',
        'Literal',
        'Immutable',
        'UserWhitespacable',
        'Method',
        'ObjectMember',
        'Property',
        'UnaryLike',
        'Pattern',
        'Class',
        'ModuleDeclaration',
        'ExportDeclaration',
        'ModuleSpecifier',
        'Flow',
        'FlowBaseAnnotation',
        'FlowDeclaration',
        'JSX',
        'NumberLiteral',
        'RegexLiteral',
        'ReferencedIdentifier',
        'ReferencedMemberExpression',
        'BindingIdentifier',
        'Scope',
        'Referenced',
        'BlockScoped',
        'Var',
        'User',
        'Generated',
        'Pure' ],
     ArrayExpression: [Function: builder],
     arrayExpression: [Function: builder],
     AssignmentExpression: [Function: builder],
     assignmentExpression: [Function: builder],
     BinaryExpression: [Function: builder],
     binaryExpression: [Function: builder],
     Directive: [Function: builder],
     directive: [Function: builder],
     DirectiveLiteral: [Function: builder],
     directiveLiteral: [Function: builder],
     BlockStatement: [Function: builder],
     blockStatement: [Function: builder],
     BreakStatement: [Function: builder],
     breakStatement: [Function: builder],
     CallExpression: [Function: builder],
     callExpression: [Function: builder],
     CatchClause: [Function: builder],
     catchClause: [Function: builder],
     ConditionalExpression: [Function: builder],
     conditionalExpression: [Function: builder],
     ContinueStatement: [Function: builder],
     continueStatement: [Function: builder],
     DebuggerStatement: [Function: builder],
     debuggerStatement: [Function: builder],
     DoWhileStatement: [Function: builder],
     doWhileStatement: [Function: builder],
     EmptyStatement: [Function: builder],
     emptyStatement: [Function: builder],
     ExpressionStatement: [Function: builder],
     expressionStatement: [Function: builder],
     File: [Function: builder],
     file: [Function: builder],
     ForInStatement: [Function: builder],
     forInStatement: [Function: builder],
     ForStatement: [Function: builder],
     forStatement: [Function: builder],
     FunctionDeclaration: [Function: builder],
     functionDeclaration: [Function: builder],
     FunctionExpression: [Function: builder],
     functionExpression: [Function: builder],
     Identifier: [Function: builder],
     identifier: [Function: builder],
     IfStatement: [Function: builder],
     ifStatement: [Function: builder],
     LabeledStatement: [Function: builder],
     labeledStatement: [Function: builder],
     StringLiteral: [Function: builder],
     stringLiteral: [Function: builder],
     NumericLiteral: [Function: builder],
     numericLiteral: [Function: builder],
     NullLiteral: [Function: builder],
     nullLiteral: [Function: builder],
     BooleanLiteral: [Function: builder],
     booleanLiteral: [Function: builder],
     RegExpLiteral: [Function: builder],
     regExpLiteral: [Function: builder],
     LogicalExpression: [Function: builder],
     logicalExpression: [Function: builder],
     MemberExpression: [Function: builder],
     memberExpression: [Function: builder],
     NewExpression: [Function: builder],
     newExpression: [Function: builder],
     Program: [Function: builder],
     program: [Function: builder],
     ObjectExpression: [Function: builder],
     objectExpression: [Function: builder],
     ObjectMethod: [Function: builder],
     objectMethod: [Function: builder],
     ObjectProperty: [Function: builder],
     objectProperty: [Function: builder],
     RestElement: [Function: builder],
     restElement: [Function: builder],
     ReturnStatement: [Function: builder],
     returnStatement: [Function: builder],
     SequenceExpression: [Function: builder],
     sequenceExpression: [Function: builder],
     SwitchCase: [Function: builder],
     switchCase: [Function: builder],
     SwitchStatement: [Function: builder],
     switchStatement: [Function: builder],
     ThisExpression: [Function: builder],
     thisExpression: [Function: builder],
     ThrowStatement: [Function: builder],
     throwStatement: [Function: builder],
     TryStatement: [Function: builder],
     tryStatement: [Function: builder],
     UnaryExpression: [Function: builder],
     unaryExpression: [Function: builder],
     UpdateExpression: [Function: builder],
     updateExpression: [Function: builder],
     VariableDeclaration: [Function: builder],
     variableDeclaration: [Function: builder],
     VariableDeclarator: [Function: builder],
     variableDeclarator: [Function: builder],
     WhileStatement: [Function: builder],
     whileStatement: [Function: builder],
     WithStatement: [Function: builder],
     withStatement: [Function: builder],
     AssignmentPattern: [Function: builder],
     assignmentPattern: [Function: builder],
     ArrayPattern: [Function: builder],
     arrayPattern: [Function: builder],
     ArrowFunctionExpression: [Function: builder],
     arrowFunctionExpression: [Function: builder],
     ClassBody: [Function: builder],
     classBody: [Function: builder],
     ClassDeclaration: [Function: builder],
     classDeclaration: [Function: builder],
     ClassExpression: [Function: builder],
     classExpression: [Function: builder],
     ExportAllDeclaration: [Function: builder],
     exportAllDeclaration: [Function: builder],
     ExportDefaultDeclaration: [Function: builder],
     exportDefaultDeclaration: [Function: builder],
     ExportNamedDeclaration: [Function: builder],
     exportNamedDeclaration: [Function: builder],
     ExportSpecifier: [Function: builder],
     exportSpecifier: [Function: builder],
     ForOfStatement: [Function: builder],
     forOfStatement: [Function: builder],
     ImportDeclaration: [Function: builder],
     importDeclaration: [Function: builder],
     ImportDefaultSpecifier: [Function: builder],
     importDefaultSpecifier: [Function: builder],
     ImportNamespaceSpecifier: [Function: builder],
     importNamespaceSpecifier: [Function: builder],
     ImportSpecifier: [Function: builder],
     importSpecifier: [Function: builder],
     MetaProperty: [Function: builder],
     metaProperty: [Function: builder],
     ClassMethod: [Function: builder],
     classMethod: [Function: builder],
     ObjectPattern: [Function: builder],
     objectPattern: [Function: builder],
     SpreadElement: [Function: builder],
     spreadElement: [Function: builder],
     Super: [Function: builder],
     super: [Function: builder],
     TaggedTemplateExpression: [Function: builder],
     taggedTemplateExpression: [Function: builder],
     TemplateElement: [Function: builder],
     templateElement: [Function: builder],
     TemplateLiteral: [Function: builder],
     templateLiteral: [Function: builder],
     YieldExpression: [Function: builder],
     yieldExpression: [Function: builder],
     AnyTypeAnnotation: [Function: builder],
     anyTypeAnnotation: [Function: builder],
     ArrayTypeAnnotation: [Function: builder],
     arrayTypeAnnotation: [Function: builder],
     BooleanTypeAnnotation: [Function: builder],
     booleanTypeAnnotation: [Function: builder],
     BooleanLiteralTypeAnnotation: [Function: builder],
     booleanLiteralTypeAnnotation: [Function: builder],
     NullLiteralTypeAnnotation: [Function: builder],
     nullLiteralTypeAnnotation: [Function: builder],
     ClassImplements: [Function: builder],
     classImplements: [Function: builder],
     ClassProperty: [Function: builder],
     classProperty: [Function: builder],
     DeclareClass: [Function: builder],
     declareClass: [Function: builder],
     DeclareFunction: [Function: builder],
     declareFunction: [Function: builder],
     DeclareInterface: [Function: builder],
     declareInterface: [Function: builder],
     DeclareModule: [Function: builder],
     declareModule: [Function: builder],
     DeclareTypeAlias: [Function: builder],
     declareTypeAlias: [Function: builder],
     DeclareVariable: [Function: builder],
     declareVariable: [Function: builder],
     ExistentialTypeParam: [Function: builder],
     existentialTypeParam: [Function: builder],
     FunctionTypeAnnotation: [Function: builder],
     functionTypeAnnotation: [Function: builder],
     FunctionTypeParam: [Function: builder],
     functionTypeParam: [Function: builder],
     GenericTypeAnnotation: [Function: builder],
     genericTypeAnnotation: [Function: builder],
     InterfaceExtends: [Function: builder],
     interfaceExtends: [Function: builder],
     InterfaceDeclaration: [Function: builder],
     interfaceDeclaration: [Function: builder],
     IntersectionTypeAnnotation: [Function: builder],
     intersectionTypeAnnotation: [Function: builder],
     MixedTypeAnnotation: [Function: builder],
     mixedTypeAnnotation: [Function: builder],
     NullableTypeAnnotation: [Function: builder],
     nullableTypeAnnotation: [Function: builder],
     NumericLiteralTypeAnnotation: [Function: builder],
     numericLiteralTypeAnnotation: [Function: builder],
     NumberTypeAnnotation: [Function: builder],
     numberTypeAnnotation: [Function: builder],
     StringLiteralTypeAnnotation: [Function: builder],
     stringLiteralTypeAnnotation: [Function: builder],
     StringTypeAnnotation: [Function: builder],
     stringTypeAnnotation: [Function: builder],
     ThisTypeAnnotation: [Function: builder],
     thisTypeAnnotation: [Function: builder],
     TupleTypeAnnotation: [Function: builder],
     tupleTypeAnnotation: [Function: builder],
     TypeofTypeAnnotation: [Function: builder],
     typeofTypeAnnotation: [Function: builder],
     TypeAlias: [Function: builder],
     typeAlias: [Function: builder],
     TypeAnnotation: [Function: builder],
     typeAnnotation: [Function: builder],
     TypeCastExpression: [Function: builder],
     typeCastExpression: [Function: builder],
     TypeParameterDeclaration: [Function: builder],
     typeParameterDeclaration: [Function: builder],
     TypeParameterInstantiation: [Function: builder],
     typeParameterInstantiation: [Function: builder],
     ObjectTypeAnnotation: [Function: builder],
     objectTypeAnnotation: [Function: builder],
     ObjectTypeCallProperty: [Function: builder],
     objectTypeCallProperty: [Function: builder],
     ObjectTypeIndexer: [Function: builder],
     objectTypeIndexer: [Function: builder],
     ObjectTypeProperty: [Function: builder],
     objectTypeProperty: [Function: builder],
     QualifiedTypeIdentifier: [Function: builder],
     qualifiedTypeIdentifier: [Function: builder],
     UnionTypeAnnotation: [Function: builder],
     unionTypeAnnotation: [Function: builder],
     VoidTypeAnnotation: [Function: builder],
     voidTypeAnnotation: [Function: builder],
     JSXAttribute: [Function: builder],
     jSXAttribute: [Function: builder],
     JSXClosingElement: [Function: builder],
     jSXClosingElement: [Function: builder],
     JSXElement: [Function: builder],
     jSXElement: [Function: builder],
     JSXEmptyExpression: [Function: builder],
     jSXEmptyExpression: [Function: builder],
     JSXExpressionContainer: [Function: builder],
     jSXExpressionContainer: [Function: builder],
     JSXIdentifier: [Function: builder],
     jSXIdentifier: [Function: builder],
     JSXMemberExpression: [Function: builder],
     jSXMemberExpression: [Function: builder],
     JSXNamespacedName: [Function: builder],
     jSXNamespacedName: [Function: builder],
     JSXOpeningElement: [Function: builder],
     jSXOpeningElement: [Function: builder],
     JSXSpreadAttribute: [Function: builder],
     jSXSpreadAttribute: [Function: builder],
     JSXText: [Function: builder],
     jSXText: [Function: builder],
     Noop: [Function: builder],
     noop: [Function: builder],
     ParenthesizedExpression: [Function: builder],
     parenthesizedExpression: [Function: builder],
     AwaitExpression: [Function: builder],
     awaitExpression: [Function: builder],
     BindExpression: [Function: builder],
     bindExpression: [Function: builder],
     Decorator: [Function: builder],
     decorator: [Function: builder],
     DoExpression: [Function: builder],
     doExpression: [Function: builder],
     ExportDefaultSpecifier: [Function: builder],
     exportDefaultSpecifier: [Function: builder],
     ExportNamespaceSpecifier: [Function: builder],
     exportNamespaceSpecifier: [Function: builder],
     RestProperty: [Function: builder],
     restProperty: [Function: builder],
     SpreadProperty: [Function: builder],
     spreadProperty: [Function: builder],
     numberLiteral: [Function],
     NumberLiteral: [Function],
     isNumberLiteral: [Function],
     assertNumberLiteral: [Function],
     regexLiteral: [Function],
     RegexLiteral: [Function],
     isRegexLiteral: [Function],
     assertRegexLiteral: [Function],
     getBindingIdentifiers: { [Function: getBindingIdentifiers] keys: [Object] },
     getOuterBindingIdentifiers: [Function: getOuterBindingIdentifiers],
     isBinding: [Function: isBinding],
     isReferenced: [Function: isReferenced],
     isValidIdentifier: [Function: isValidIdentifier],
     isLet: [Function: isLet],
     isBlockScoped: [Function: isBlockScoped],
     isVar: [Function: isVar],
     isSpecifierDefault: [Function: isSpecifierDefault],
     isScope: [Function: isScope],
     toComputedKey: [Function: toComputedKey],
     toSequenceExpression: [Function: toSequenceExpression],
     toKeyAlias: { [Function: toKeyAlias] uid: 0, increment: [Function] },
     toIdentifier: [Function: toIdentifier],
     toBindingIdentifierName: [Function: toBindingIdentifierName],
     toStatement: [Function: toStatement],
     toExpression: [Function: toExpression],
     toBlock: [Function: toBlock],
     valueToNode: [Function: valueToNode],
     createUnionTypeAnnotation: [Function: createUnionTypeAnnotation],
     removeTypeDuplicates: [Function: removeTypeDuplicates],
     createTypeAnnotationBasedOnTypeof: [Function: createTypeAnnotationBasedOnTypeof] },
  traverse: 
   { [Function: traverse]
     visitors: 
      { __esModule: true,
        explode: [Function: explode],
        verify: [Function: verify],
        merge: [Function: merge] },
     verify: [Function: verify],
     explode: [Function: explode],
     NodePath: { [Function: NodePath] get: [Function: get] },
     Scope: { [Function: Scope] globals: [Object], contextVariables: [Object] },
     Hub: [Function: Hub],
     cheap: [Function],
     node: [Function],
     clearNode: [Function],
     removeProperties: [Function],
     hasType: [Function],
     clearCache: [Function],
     copyCache: [Function] },
  OptionManager: 
   { [Function: OptionManager]
     memoisePluginContainer: [Function: memoisePluginContainer],
     createBareOptions: [Function: createBareOptions],
     normalisePlugin: [Function: normalisePlugin],
     normalisePlugins: [Function: normalisePlugins],
     memoisedPlugins: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ] },
  Pipeline: [Function: Pipeline],
  analyse: [Function: bound analyse],
  transform: [Function: bound transform],
  transformFromAst: [Function: bound transformFromAst] }
    at assertPath (path.js:8:11)
    at Object.posix.resolve (path.js:426:5)
    at module.exports (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/react-transform/index.js:9:15)
    at Function.memoisePluginContainer (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:109:13)
    at Function.normalisePlugin (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:143:32)
    at /Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:183:30
    at Array.map (native)
    at Function.normalisePlugins (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:155:20)
    at OptionManager.mergeOptions (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:277:36)
    at OptionManager.mergeOptions (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:330:10)
    at OptionManager.addConfig (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:207:10)
    at OptionManager.findConfigs (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:413:16)
    at OptionManager.init (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:461:12)
    at File.initOptions (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/index.js:194:75)
    at new File (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/index.js:123:22)
    at Pipeline.transform (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/pipeline.js:45:16)
Child html-webpack-plugin for "index.html":
    chunk    {0} index.html 480 kB [rendered]
        [0] ./~/html-webpack-plugin/lib/loader.js!./client/index.tpl.html 430 bytes {0} [built]
        [1] ./~/html-webpack-plugin/~/lodash/lodash.js 480 kB {0} [built]
        [2] (webpack)/buildin/module.js 251 bytes {0} [built]
webpack: bundle is now VALID.
webpack: bundle is now INVALID.
Hash: 020fea497c9ca3395d7e
Version: webpack 1.12.14
Time: 42ms

ERROR in ./client/main.js
Module build failed: TypeError: Path must be a string. Received { __esModule: true,
  Plugin: [Function: Plugin],
  transformFile: [Function: transformFile],
  transformFileSync: [Function: transformFileSync],
  File: [Function: File],
  options: 
   { filename: 
      { type: 'filename',
        description: 'filename to use when reading from stdin - this will be used in source-maps, errors etc',
        default: 'unknown',
        shorthand: 'f' },
     filenameRelative: { hidden: true, type: 'string' },
     inputSourceMap: { hidden: true },
     env: { hidden: true, default: {} },
     mode: { description: '', hidden: true },
     retainLines: 
      { type: 'boolean',
        default: false,
        description: 'retain line numbers - will result in really ugly code' },
     highlightCode: 
      { description: 'enable/disable ANSI syntax highlighting of code frames (on by default)',
        type: 'boolean',
        default: true },
     suppressDeprecationMessages: { type: 'boolean', default: false, hidden: true },
     presets: { type: 'list', description: '', default: [] },
     plugins: { type: 'list', default: [], description: '' },
     ignore: 
      { type: 'list',
        description: 'list of glob paths to **not** compile',
        default: [] },
     only: 
      { type: 'list',
        description: 'list of glob paths to **only** compile' },
     code: { hidden: true, default: true, type: 'boolean' },
     metadata: { hidden: true, default: true, type: 'boolean' },
     ast: { hidden: true, default: true, type: 'boolean' },
     extends: { type: 'string', hidden: true },
     comments: 
      { type: 'boolean',
        default: true,
        description: 'write comments to generated output (true by default)' },
     shouldPrintComment: 
      { hidden: true,
        description: 'optional callback to control whether a comment should be inserted, when this is used the comments option is ignored' },
     compact: 
      { type: 'booleanString',
        default: 'auto',
        description: 'do not include superfluous whitespace characters and line terminators [true|false|auto]' },
     minified: 
      { type: 'boolean',
        default: false,
        description: 'save as much bytes when printing [true|false]' },
     sourceMap: { alias: 'sourceMaps', hidden: true },
     sourceMaps: 
      { type: 'booleanString',
        description: '[true|false|inline]',
        default: false,
        shorthand: 's' },
     sourceMapTarget: 
      { type: 'string',
        description: 'set `file` on returned source map' },
     sourceFileName: 
      { type: 'string',
        description: 'set `sources[0]` on returned source map' },
     sourceRoot: 
      { type: 'filename',
        description: 'the root from which all sources are relative' },
     babelrc: 
      { description: 'Whether or not to look up .babelrc and .babelignore files',
        type: 'boolean',
        default: true },
     sourceType: { description: '', default: 'module' },
     auxiliaryCommentBefore: 
      { type: 'string',
        description: 'print a comment before any injected non-user code' },
     auxiliaryCommentAfter: 
      { type: 'string',
        description: 'print a comment after any injected non-user code' },
     resolveModuleSource: { hidden: true },
     getModuleId: { hidden: true },
     moduleRoot: 
      { type: 'filename',
        description: 'optional prefix for the AMD module formatter that will be prepend to the filename on module definitions' },
     moduleIds: 
      { type: 'boolean',
        default: false,
        shorthand: 'M',
        description: 'insert an explicit id for modules' },
     moduleId: 
      { description: 'specify a custom name for module ids',
        type: 'string' },
     passPerPreset: 
      { description: 'Whether to spawn a traversal pass per a preset. By default all presets are merged.',
        type: 'boolean',
        default: false,
        hidden: true } },
  buildExternalHelpers: [Function],
  template: [Function],
  version: '6.7.2',
  util: 
   { __esModule: true,
     canCompile: { [Function: canCompile] EXTENSIONS: [Object] },
     list: [Function: list],
     regexify: [Function: regexify],
     arrayify: [Function: arrayify],
     booleanify: [Function: booleanify],
     shouldIgnore: [Function: shouldIgnore],
     inherits: [Function],
     inspect: { [Function: inspect] colors: [Object], styles: [Object] } },
  messages: 
   { __esModule: true,
     get: [Function: get],
     parseArgs: [Function: parseArgs],
     MESSAGES: 
      { tailCallReassignmentDeopt: 'Function reference has been reassigned, so it will probably be dereferenced, therefore we can\'t optimise this with confidence',
        classesIllegalBareSuper: 'Illegal use of bare super',
        classesIllegalSuperCall: 'Direct super call is illegal in non-constructor, use super.$1() instead',
        scopeDuplicateDeclaration: 'Duplicate declaration $1',
        settersNoRest: 'Setters aren\'t allowed to have a rest',
        noAssignmentsInForHead: 'No assignments allowed in for-in/of head',
        expectedMemberExpressionOrIdentifier: 'Expected type MemberExpression or Identifier',
        invalidParentForThisNode: 'We don\'t know how to handle this node within the current parent - please open an issue',
        readOnly: '$1 is read-only',
        unknownForHead: 'Unknown node type $1 in ForStatement',
        didYouMean: 'Did you mean $1?',
        codeGeneratorDeopt: 'Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.',
        missingTemplatesDirectory: 'no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues',
        unsupportedOutputType: 'Unsupported output type $1',
        illegalMethodName: 'Illegal method name $1',
        lostTrackNodePath: 'We lost track of this node\'s position, likely because the AST was directly manipulated',
        modulesIllegalExportName: 'Illegal export $1',
        modulesDuplicateDeclarations: 'Duplicate module declarations with the same source but in different scopes',
        undeclaredVariable: 'Reference to undeclared variable $1',
        undeclaredVariableType: 'Referencing a type alias outside of a type annotation',
        undeclaredVariableSuggestion: 'Reference to undeclared variable $1 - did you mean $2?',
        traverseNeedsParent: 'You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.',
        traverseVerifyRootFunction: 'You passed `traverse()` a function when it expected a visitor object, are you sure you didn\'t mean `{ enter: Function }`?',
        traverseVerifyVisitorProperty: 'You passed `traverse()` a visitor object with the property $1 that has the invalid property $2',
        traverseVerifyNodeType: 'You gave us a visitor for the node type $1 but it\'s not a valid type',
        pluginNotObject: 'Plugin $2 specified in $1 was expected to return an object when invoked but returned $3',
        pluginNotFunction: 'Plugin $2 specified in $1 was expected to return a function but returned $3',
        pluginUnknown: 'Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4',
        pluginInvalidProperty: 'Plugin $2 specified in $1 provided an invalid property of $3' } },
  types: 
   { __esModule: true,
     is: [Function: is],
     isType: [Function: isType],
     validate: [Function: validate],
     shallowEqual: [Function: shallowEqual],
     appendToMemberExpression: [Function: appendToMemberExpression],
     prependToMemberExpression: [Function: prependToMemberExpression],
     ensureBlock: [Function: ensureBlock],
     clone: [Function: clone],
     cloneWithoutLoc: [Function: cloneWithoutLoc],
     cloneDeep: [Function: cloneDeep],
     buildMatchMemberExpression: [Function: buildMatchMemberExpression],
     removeComments: [Function: removeComments],
     inheritsComments: [Function: inheritsComments],
     inheritTrailingComments: [Function: inheritTrailingComments],
     inheritLeadingComments: [Function: inheritLeadingComments],
     inheritInnerComments: [Function: inheritInnerComments],
     inherits: [Function: inherits],
     assertNode: [Function: assertNode],
     isNode: [Function: isNode],
     STATEMENT_OR_BLOCK_KEYS: [ 'consequent', 'body', 'alternate' ],
     FLATTENABLE_KEYS: [ 'body', 'expressions' ],
     FOR_INIT_KEYS: [ 'left', 'init' ],
     COMMENT_KEYS: [ 'leadingComments', 'trailingComments', 'innerComments' ],
     LOGICAL_OPERATORS: [ '||', '&&' ],
     UPDATE_OPERATORS: [ '++', '--' ],
     BOOLEAN_NUMBER_BINARY_OPERATORS: [ '>', '<', '>=', '<=' ],
     EQUALITY_BINARY_OPERATORS: [ '==', '===', '!=', '!==' ],
     COMPARISON_BINARY_OPERATORS: [ '==', '===', '!=', '!==', 'in', 'instanceof' ],
     BOOLEAN_BINARY_OPERATORS: [ '==', '===', '!=', '!==', 'in', 'instanceof', '>', '<', '>=', '<=' ],
     NUMBER_BINARY_OPERATORS: [ '-', '/', '%', '*', '**', '&', '|', '>>', '>>>', '<<', '^' ],
     BINARY_OPERATORS: 
      [ '+',
        '-',
        '/',
        '%',
        '*',
        '**',
        '&',
        '|',
        '>>',
        '>>>',
        '<<',
        '^',
        '==',
        '===',
        '!=',
        '!==',
        'in',
        'instanceof',
        '>',
        '<',
        '>=',
        '<=' ],
     BOOLEAN_UNARY_OPERATORS: [ 'delete', '!' ],
     NUMBER_UNARY_OPERATORS: [ '+', '-', '++', '--', '~' ],
     STRING_UNARY_OPERATORS: [ 'typeof' ],
     UNARY_OPERATORS: [ 'void', 'delete', '!', '+', '-', '++', '--', '~', 'typeof' ],
     INHERIT_KEYS: { optional: [Object], force: [Object] },
     BLOCK_SCOPED_SYMBOL: Symbol(var used to be block scoped),
     NOT_LOCAL_BINDING: Symbol(should not be considered a local binding),
     VISITOR_KEYS: 
      { ArrayExpression: [Object],
        AssignmentExpression: [Object],
        BinaryExpression: [Object],
        Directive: [Object],
        DirectiveLiteral: [],
        BlockStatement: [Object],
        BreakStatement: [Object],
        CallExpression: [Object],
        CatchClause: [Object],
        ConditionalExpression: [Object],
        ContinueStatement: [Object],
        DebuggerStatement: [],
        DoWhileStatement: [Object],
        EmptyStatement: [],
        ExpressionStatement: [Object],
        File: [Object],
        ForInStatement: [Object],
        ForStatement: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        Identifier: [Object],
        IfStatement: [Object],
        LabeledStatement: [Object],
        StringLiteral: [],
        NumericLiteral: [],
        NullLiteral: [],
        BooleanLiteral: [],
        RegExpLiteral: [],
        LogicalExpression: [Object],
        MemberExpression: [Object],
        NewExpression: [Object],
        Program: [Object],
        ObjectExpression: [Object],
        ObjectMethod: [Object],
        ObjectProperty: [Object],
        RestElement: [Object],
        ReturnStatement: [Object],
        SequenceExpression: [Object],
        SwitchCase: [Object],
        SwitchStatement: [Object],
        ThisExpression: [],
        ThrowStatement: [Object],
        TryStatement: [Object],
        UnaryExpression: [Object],
        UpdateExpression: [Object],
        VariableDeclaration: [Object],
        VariableDeclarator: [Object],
        WhileStatement: [Object],
        WithStatement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ArrowFunctionExpression: [Object],
        ClassBody: [Object],
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ExportSpecifier: [Object],
        ForOfStatement: [Object],
        ImportDeclaration: [Object],
        ImportDefaultSpecifier: [Object],
        ImportNamespaceSpecifier: [Object],
        ImportSpecifier: [Object],
        MetaProperty: [Object],
        ClassMethod: [Object],
        ObjectPattern: [Object],
        SpreadElement: [Object],
        Super: [],
        TaggedTemplateExpression: [Object],
        TemplateElement: [],
        TemplateLiteral: [Object],
        YieldExpression: [Object],
        AnyTypeAnnotation: [],
        ArrayTypeAnnotation: [Object],
        BooleanTypeAnnotation: [],
        BooleanLiteralTypeAnnotation: [],
        NullLiteralTypeAnnotation: [],
        ClassImplements: [Object],
        ClassProperty: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        ExistentialTypeParam: [],
        FunctionTypeAnnotation: [Object],
        FunctionTypeParam: [Object],
        GenericTypeAnnotation: [Object],
        InterfaceExtends: [Object],
        InterfaceDeclaration: [Object],
        IntersectionTypeAnnotation: [Object],
        MixedTypeAnnotation: [],
        NullableTypeAnnotation: [Object],
        NumericLiteralTypeAnnotation: [],
        NumberTypeAnnotation: [],
        StringLiteralTypeAnnotation: [],
        StringTypeAnnotation: [],
        ThisTypeAnnotation: [],
        TupleTypeAnnotation: [Object],
        TypeofTypeAnnotation: [Object],
        TypeAlias: [Object],
        TypeAnnotation: [Object],
        TypeCastExpression: [Object],
        TypeParameterDeclaration: [Object],
        TypeParameterInstantiation: [Object],
        ObjectTypeAnnotation: [Object],
        ObjectTypeCallProperty: [Object],
        ObjectTypeIndexer: [Object],
        ObjectTypeProperty: [Object],
        QualifiedTypeIdentifier: [Object],
        UnionTypeAnnotation: [Object],
        VoidTypeAnnotation: [],
        JSXAttribute: [Object],
        JSXClosingElement: [Object],
        JSXElement: [Object],
        JSXEmptyExpression: [],
        JSXExpressionContainer: [Object],
        JSXIdentifier: [],
        JSXMemberExpression: [Object],
        JSXNamespacedName: [Object],
        JSXOpeningElement: [Object],
        JSXSpreadAttribute: [Object],
        JSXText: [],
        Noop: [],
        ParenthesizedExpression: [Object],
        AwaitExpression: [Object],
        BindExpression: [Object],
        Decorator: [Object],
        DoExpression: [Object],
        ExportDefaultSpecifier: [Object],
        ExportNamespaceSpecifier: [Object],
        RestProperty: [Object],
        SpreadProperty: [Object] },
     ALIAS_KEYS: 
      { ArrayExpression: [Object],
        AssignmentExpression: [Object],
        BinaryExpression: [Object],
        Directive: [],
        DirectiveLiteral: [],
        BlockStatement: [Object],
        BreakStatement: [Object],
        CallExpression: [Object],
        CatchClause: [Object],
        ConditionalExpression: [Object],
        ContinueStatement: [Object],
        DebuggerStatement: [Object],
        DoWhileStatement: [Object],
        EmptyStatement: [Object],
        ExpressionStatement: [Object],
        File: [],
        ForInStatement: [Object],
        ForStatement: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        Identifier: [Object],
        IfStatement: [Object],
        LabeledStatement: [Object],
        StringLiteral: [Object],
        NumericLiteral: [Object],
        NullLiteral: [Object],
        BooleanLiteral: [Object],
        RegExpLiteral: [Object],
        LogicalExpression: [Object],
        MemberExpression: [Object],
        NewExpression: [Object],
        Program: [Object],
        ObjectExpression: [Object],
        ObjectMethod: [Object],
        ObjectProperty: [Object],
        RestElement: [Object],
        ReturnStatement: [Object],
        SequenceExpression: [Object],
        SwitchCase: [],
        SwitchStatement: [Object],
        ThisExpression: [Object],
        ThrowStatement: [Object],
        TryStatement: [Object],
        UnaryExpression: [Object],
        UpdateExpression: [Object],
        VariableDeclaration: [Object],
        VariableDeclarator: [],
        WhileStatement: [Object],
        WithStatement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ArrowFunctionExpression: [Object],
        ClassBody: [],
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ExportSpecifier: [Object],
        ForOfStatement: [Object],
        ImportDeclaration: [Object],
        ImportDefaultSpecifier: [Object],
        ImportNamespaceSpecifier: [Object],
        ImportSpecifier: [Object],
        MetaProperty: [Object],
        ClassMethod: [Object],
        ObjectPattern: [Object],
        SpreadElement: [Object],
        Super: [Object],
        TaggedTemplateExpression: [Object],
        TemplateElement: [],
        TemplateLiteral: [Object],
        YieldExpression: [Object],
        AnyTypeAnnotation: [Object],
        ArrayTypeAnnotation: [Object],
        BooleanTypeAnnotation: [Object],
        BooleanLiteralTypeAnnotation: [Object],
        NullLiteralTypeAnnotation: [Object],
        ClassImplements: [Object],
        ClassProperty: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        ExistentialTypeParam: [Object],
        FunctionTypeAnnotation: [Object],
        FunctionTypeParam: [Object],
        GenericTypeAnnotation: [Object],
        InterfaceExtends: [Object],
        InterfaceDeclaration: [Object],
        IntersectionTypeAnnotation: [Object],
        MixedTypeAnnotation: [Object],
        NullableTypeAnnotation: [Object],
        NumericLiteralTypeAnnotation: [Object],
        NumberTypeAnnotation: [Object],
        StringLiteralTypeAnnotation: [Object],
        StringTypeAnnotation: [Object],
        ThisTypeAnnotation: [Object],
        TupleTypeAnnotation: [Object],
        TypeofTypeAnnotation: [Object],
        TypeAlias: [Object],
        TypeAnnotation: [Object],
        TypeCastExpression: [Object],
        TypeParameterDeclaration: [Object],
        TypeParameterInstantiation: [Object],
        ObjectTypeAnnotation: [Object],
        ObjectTypeCallProperty: [Object],
        ObjectTypeIndexer: [Object],
        ObjectTypeProperty: [Object],
        QualifiedTypeIdentifier: [Object],
        UnionTypeAnnotation: [Object],
        VoidTypeAnnotation: [Object],
        JSXAttribute: [Object],
        JSXClosingElement: [Object],
        JSXElement: [Object],
        JSXEmptyExpression: [Object],
        JSXExpressionContainer: [Object],
        JSXIdentifier: [Object],
        JSXMemberExpression: [Object],
        JSXNamespacedName: [Object],
        JSXOpeningElement: [Object],
        JSXSpreadAttribute: [Object],
        JSXText: [Object],
        Noop: [],
        ParenthesizedExpression: [Object],
        AwaitExpression: [Object],
        BindExpression: [Object],
        Decorator: [],
        DoExpression: [Object],
        ExportDefaultSpecifier: [Object],
        ExportNamespaceSpecifier: [Object],
        RestProperty: [Object],
        SpreadProperty: [Object] },
     NODE_FIELDS: 
      { ArrayExpression: [Object],
        AssignmentExpression: [Object],
        BinaryExpression: [Object],
        Directive: [Object],
        DirectiveLiteral: [Object],
        BlockStatement: [Object],
        BreakStatement: [Object],
        CallExpression: [Object],
        CatchClause: [Object],
        ConditionalExpression: [Object],
        ContinueStatement: [Object],
        DebuggerStatement: {},
        DoWhileStatement: [Object],
        EmptyStatement: {},
        ExpressionStatement: [Object],
        File: [Object],
        ForInStatement: [Object],
        ForStatement: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        Identifier: [Object],
        IfStatement: [Object],
        LabeledStatement: [Object],
        StringLiteral: [Object],
        NumericLiteral: [Object],
        NullLiteral: {},
        BooleanLiteral: [Object],
        RegExpLiteral: [Object],
        LogicalExpression: [Object],
        MemberExpression: [Object],
        NewExpression: [Object],
        Program: [Object],
        ObjectExpression: [Object],
        ObjectMethod: [Object],
        ObjectProperty: [Object],
        RestElement: [Object],
        ReturnStatement: [Object],
        SequenceExpression: [Object],
        SwitchCase: [Object],
        SwitchStatement: [Object],
        ThisExpression: {},
        ThrowStatement: [Object],
        TryStatement: [Object],
        UnaryExpression: [Object],
        UpdateExpression: [Object],
        VariableDeclaration: [Object],
        VariableDeclarator: [Object],
        WhileStatement: [Object],
        WithStatement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ArrowFunctionExpression: [Object],
        ClassBody: [Object],
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ExportSpecifier: [Object],
        ForOfStatement: [Object],
        ImportDeclaration: [Object],
        ImportDefaultSpecifier: [Object],
        ImportNamespaceSpecifier: [Object],
        ImportSpecifier: [Object],
        MetaProperty: [Object],
        ClassMethod: [Object],
        ObjectPattern: [Object],
        SpreadElement: [Object],
        Super: {},
        TaggedTemplateExpression: [Object],
        TemplateElement: [Object],
        TemplateLiteral: [Object],
        YieldExpression: [Object],
        AnyTypeAnnotation: {},
        ArrayTypeAnnotation: [Object],
        BooleanTypeAnnotation: {},
        BooleanLiteralTypeAnnotation: {},
        NullLiteralTypeAnnotation: {},
        ClassImplements: [Object],
        ClassProperty: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        ExistentialTypeParam: {},
        FunctionTypeAnnotation: [Object],
        FunctionTypeParam: [Object],
        GenericTypeAnnotation: [Object],
        InterfaceExtends: [Object],
        InterfaceDeclaration: [Object],
        IntersectionTypeAnnotation: [Object],
        MixedTypeAnnotation: {},
        NullableTypeAnnotation: [Object],
        NumericLiteralTypeAnnotation: {},
        NumberTypeAnnotation: {},
        StringLiteralTypeAnnotation: {},
        StringTypeAnnotation: {},
        ThisTypeAnnotation: {},
        TupleTypeAnnotation: [Object],
        TypeofTypeAnnotation: [Object],
        TypeAlias: [Object],
        TypeAnnotation: [Object],
        TypeCastExpression: [Object],
        TypeParameterDeclaration: [Object],
        TypeParameterInstantiation: [Object],
        ObjectTypeAnnotation: [Object],
        ObjectTypeCallProperty: [Object],
        ObjectTypeIndexer: [Object],
        ObjectTypeProperty: [Object],
        QualifiedTypeIdentifier: [Object],
        UnionTypeAnnotation: [Object],
        VoidTypeAnnotation: {},
        JSXAttribute: [Object],
        JSXClosingElement: [Object],
        JSXElement: [Object],
        JSXEmptyExpression: {},
        JSXExpressionContainer: [Object],
        JSXIdentifier: [Object],
        JSXMemberExpression: [Object],
        JSXNamespacedName: [Object],
        JSXOpeningElement: [Object],
        JSXSpreadAttribute: [Object],
        JSXText: [Object],
        Noop: {},
        ParenthesizedExpression: [Object],
        AwaitExpression: [Object],
        BindExpression: [Object],
        Decorator: [Object],
        DoExpression: [Object],
        ExportDefaultSpecifier: [Object],
        ExportNamespaceSpecifier: [Object],
        RestProperty: [Object],
        SpreadProperty: [Object] },
     BUILDER_KEYS: 
      { ArrayExpression: [Object],
        AssignmentExpression: [Object],
        BinaryExpression: [Object],
        Directive: [Object],
        DirectiveLiteral: [Object],
        BlockStatement: [Object],
        BreakStatement: [Object],
        CallExpression: [Object],
        CatchClause: [Object],
        ConditionalExpression: [Object],
        ContinueStatement: [Object],
        DebuggerStatement: [],
        DoWhileStatement: [Object],
        EmptyStatement: [],
        ExpressionStatement: [Object],
        File: [Object],
        ForInStatement: [Object],
        ForStatement: [Object],
        FunctionDeclaration: [Object],
        FunctionExpression: [Object],
        Identifier: [Object],
        IfStatement: [Object],
        LabeledStatement: [Object],
        StringLiteral: [Object],
        NumericLiteral: [Object],
        NullLiteral: [],
        BooleanLiteral: [Object],
        RegExpLiteral: [Object],
        LogicalExpression: [Object],
        MemberExpression: [Object],
        NewExpression: [Object],
        Program: [Object],
        ObjectExpression: [Object],
        ObjectMethod: [Object],
        ObjectProperty: [Object],
        RestElement: [Object],
        ReturnStatement: [Object],
        SequenceExpression: [Object],
        SwitchCase: [Object],
        SwitchStatement: [Object],
        ThisExpression: [],
        ThrowStatement: [Object],
        TryStatement: [Object],
        UnaryExpression: [Object],
        UpdateExpression: [Object],
        VariableDeclaration: [Object],
        VariableDeclarator: [Object],
        WhileStatement: [Object],
        WithStatement: [Object],
        AssignmentPattern: [Object],
        ArrayPattern: [Object],
        ArrowFunctionExpression: [Object],
        ClassBody: [Object],
        ClassDeclaration: [Object],
        ClassExpression: [Object],
        ExportAllDeclaration: [Object],
        ExportDefaultDeclaration: [Object],
        ExportNamedDeclaration: [Object],
        ExportSpecifier: [Object],
        ForOfStatement: [Object],
        ImportDeclaration: [Object],
        ImportDefaultSpecifier: [Object],
        ImportNamespaceSpecifier: [Object],
        ImportSpecifier: [Object],
        MetaProperty: [Object],
        ClassMethod: [Object],
        ObjectPattern: [Object],
        SpreadElement: [Object],
        Super: [],
        TaggedTemplateExpression: [Object],
        TemplateElement: [Object],
        TemplateLiteral: [Object],
        YieldExpression: [Object],
        AnyTypeAnnotation: [],
        ArrayTypeAnnotation: [Object],
        BooleanTypeAnnotation: [],
        BooleanLiteralTypeAnnotation: [],
        NullLiteralTypeAnnotation: [],
        ClassImplements: [Object],
        ClassProperty: [Object],
        DeclareClass: [Object],
        DeclareFunction: [Object],
        DeclareInterface: [Object],
        DeclareModule: [Object],
        DeclareTypeAlias: [Object],
        DeclareVariable: [Object],
        ExistentialTypeParam: [],
        FunctionTypeAnnotation: [Object],
        FunctionTypeParam: [Object],
        GenericTypeAnnotation: [Object],
        InterfaceExtends: [Object],
        InterfaceDeclaration: [Object],
        IntersectionTypeAnnotation: [Object],
        MixedTypeAnnotation: [],
        NullableTypeAnnotation: [Object],
        NumericLiteralTypeAnnotation: [],
        NumberTypeAnnotation: [],
        StringLiteralTypeAnnotation: [],
        StringTypeAnnotation: [],
        ThisTypeAnnotation: [],
        TupleTypeAnnotation: [Object],
        TypeofTypeAnnotation: [Object],
        TypeAlias: [Object],
        TypeAnnotation: [Object],
        TypeCastExpression: [Object],
        TypeParameterDeclaration: [Object],
        TypeParameterInstantiation: [Object],
        ObjectTypeAnnotation: [Object],
        ObjectTypeCallProperty: [Object],
        ObjectTypeIndexer: [Object],
        ObjectTypeProperty: [Object],
        QualifiedTypeIdentifier: [Object],
        UnionTypeAnnotation: [Object],
        VoidTypeAnnotation: [],
        JSXAttribute: [Object],
        JSXClosingElement: [Object],
        JSXElement: [Object],
        JSXEmptyExpression: [],
        JSXExpressionContainer: [Object],
        JSXIdentifier: [Object],
        JSXMemberExpression: [Object],
        JSXNamespacedName: [Object],
        JSXOpeningElement: [Object],
        JSXSpreadAttribute: [Object],
        JSXText: [Object],
        Noop: [],
        ParenthesizedExpression: [Object],
        AwaitExpression: [Object],
        BindExpression: [Object],
        Decorator: [Object],
        DoExpression: [Object],
        ExportDefaultSpecifier: [Object],
        ExportNamespaceSpecifier: [Object],
        RestProperty: [Object],
        SpreadProperty: [Object] },
     DEPRECATED_KEYS: 
      { NumberLiteral: 'NumericLiteral',
        RegexLiteral: 'RegExpLiteral' },
     react: 
      { __esModule: true,
        isCompatTag: [Function: isCompatTag],
        buildChildren: [Function: buildChildren],
        isReactComponent: [Function] },
     isArrayExpression: [Function],
     assertArrayExpression: [Function],
     isAssignmentExpression: [Function],
     assertAssignmentExpression: [Function],
     isBinaryExpression: [Function],
     assertBinaryExpression: [Function],
     isDirective: [Function],
     assertDirective: [Function],
     isDirectiveLiteral: [Function],
     assertDirectiveLiteral: [Function],
     isBlockStatement: [Function],
     assertBlockStatement: [Function],
     isBreakStatement: [Function],
     assertBreakStatement: [Function],
     isCallExpression: [Function],
     assertCallExpression: [Function],
     isCatchClause: [Function],
     assertCatchClause: [Function],
     isConditionalExpression: [Function],
     assertConditionalExpression: [Function],
     isContinueStatement: [Function],
     assertContinueStatement: [Function],
     isDebuggerStatement: [Function],
     assertDebuggerStatement: [Function],
     isDoWhileStatement: [Function],
     assertDoWhileStatement: [Function],
     isEmptyStatement: [Function],
     assertEmptyStatement: [Function],
     isExpressionStatement: [Function],
     assertExpressionStatement: [Function],
     isFile: [Function],
     assertFile: [Function],
     isForInStatement: [Function],
     assertForInStatement: [Function],
     isForStatement: [Function],
     assertForStatement: [Function],
     isFunctionDeclaration: [Function],
     assertFunctionDeclaration: [Function],
     isFunctionExpression: [Function],
     assertFunctionExpression: [Function],
     isIdentifier: [Function],
     assertIdentifier: [Function],
     isIfStatement: [Function],
     assertIfStatement: [Function],
     isLabeledStatement: [Function],
     assertLabeledStatement: [Function],
     isStringLiteral: [Function],
     assertStringLiteral: [Function],
     isNumericLiteral: [Function],
     assertNumericLiteral: [Function],
     isNullLiteral: [Function],
     assertNullLiteral: [Function],
     isBooleanLiteral: [Function],
     assertBooleanLiteral: [Function],
     isRegExpLiteral: [Function],
     assertRegExpLiteral: [Function],
     isLogicalExpression: [Function],
     assertLogicalExpression: [Function],
     isMemberExpression: [Function],
     assertMemberExpression: [Function],
     isNewExpression: [Function],
     assertNewExpression: [Function],
     isProgram: [Function],
     assertProgram: [Function],
     isObjectExpression: [Function],
     assertObjectExpression: [Function],
     isObjectMethod: [Function],
     assertObjectMethod: [Function],
     isObjectProperty: [Function],
     assertObjectProperty: [Function],
     isRestElement: [Function],
     assertRestElement: [Function],
     isReturnStatement: [Function],
     assertReturnStatement: [Function],
     isSequenceExpression: [Function],
     assertSequenceExpression: [Function],
     isSwitchCase: [Function],
     assertSwitchCase: [Function],
     isSwitchStatement: [Function],
     assertSwitchStatement: [Function],
     isThisExpression: [Function],
     assertThisExpression: [Function],
     isThrowStatement: [Function],
     assertThrowStatement: [Function],
     isTryStatement: [Function],
     assertTryStatement: [Function],
     isUnaryExpression: [Function],
     assertUnaryExpression: [Function],
     isUpdateExpression: [Function],
     assertUpdateExpression: [Function],
     isVariableDeclaration: [Function],
     assertVariableDeclaration: [Function],
     isVariableDeclarator: [Function],
     assertVariableDeclarator: [Function],
     isWhileStatement: [Function],
     assertWhileStatement: [Function],
     isWithStatement: [Function],
     assertWithStatement: [Function],
     isAssignmentPattern: [Function],
     assertAssignmentPattern: [Function],
     isArrayPattern: [Function],
     assertArrayPattern: [Function],
     isArrowFunctionExpression: [Function],
     assertArrowFunctionExpression: [Function],
     isClassBody: [Function],
     assertClassBody: [Function],
     isClassDeclaration: [Function],
     assertClassDeclaration: [Function],
     isClassExpression: [Function],
     assertClassExpression: [Function],
     isExportAllDeclaration: [Function],
     assertExportAllDeclaration: [Function],
     isExportDefaultDeclaration: [Function],
     assertExportDefaultDeclaration: [Function],
     isExportNamedDeclaration: [Function],
     assertExportNamedDeclaration: [Function],
     isExportSpecifier: [Function],
     assertExportSpecifier: [Function],
     isForOfStatement: [Function],
     assertForOfStatement: [Function],
     isImportDeclaration: [Function],
     assertImportDeclaration: [Function],
     isImportDefaultSpecifier: [Function],
     assertImportDefaultSpecifier: [Function],
     isImportNamespaceSpecifier: [Function],
     assertImportNamespaceSpecifier: [Function],
     isImportSpecifier: [Function],
     assertImportSpecifier: [Function],
     isMetaProperty: [Function],
     assertMetaProperty: [Function],
     isClassMethod: [Function],
     assertClassMethod: [Function],
     isObjectPattern: [Function],
     assertObjectPattern: [Function],
     isSpreadElement: [Function],
     assertSpreadElement: [Function],
     isSuper: [Function],
     assertSuper: [Function],
     isTaggedTemplateExpression: [Function],
     assertTaggedTemplateExpression: [Function],
     isTemplateElement: [Function],
     assertTemplateElement: [Function],
     isTemplateLiteral: [Function],
     assertTemplateLiteral: [Function],
     isYieldExpression: [Function],
     assertYieldExpression: [Function],
     isAnyTypeAnnotation: [Function],
     assertAnyTypeAnnotation: [Function],
     isArrayTypeAnnotation: [Function],
     assertArrayTypeAnnotation: [Function],
     isBooleanTypeAnnotation: [Function],
     assertBooleanTypeAnnotation: [Function],
     isBooleanLiteralTypeAnnotation: [Function],
     assertBooleanLiteralTypeAnnotation: [Function],
     isNullLiteralTypeAnnotation: [Function],
     assertNullLiteralTypeAnnotation: [Function],
     isClassImplements: [Function],
     assertClassImplements: [Function],
     isClassProperty: [Function],
     assertClassProperty: [Function],
     isDeclareClass: [Function],
     assertDeclareClass: [Function],
     isDeclareFunction: [Function],
     assertDeclareFunction: [Function],
     isDeclareInterface: [Function],
     assertDeclareInterface: [Function],
     isDeclareModule: [Function],
     assertDeclareModule: [Function],
     isDeclareTypeAlias: [Function],
     assertDeclareTypeAlias: [Function],
     isDeclareVariable: [Function],
     assertDeclareVariable: [Function],
     isExistentialTypeParam: [Function],
     assertExistentialTypeParam: [Function],
     isFunctionTypeAnnotation: [Function],
     assertFunctionTypeAnnotation: [Function],
     isFunctionTypeParam: [Function],
     assertFunctionTypeParam: [Function],
     isGenericTypeAnnotation: [Function],
     assertGenericTypeAnnotation: [Function],
     isInterfaceExtends: [Function],
     assertInterfaceExtends: [Function],
     isInterfaceDeclaration: [Function],
     assertInterfaceDeclaration: [Function],
     isIntersectionTypeAnnotation: [Function],
     assertIntersectionTypeAnnotation: [Function],
     isMixedTypeAnnotation: [Function],
     assertMixedTypeAnnotation: [Function],
     isNullableTypeAnnotation: [Function],
     assertNullableTypeAnnotation: [Function],
     isNumericLiteralTypeAnnotation: [Function],
     assertNumericLiteralTypeAnnotation: [Function],
     isNumberTypeAnnotation: [Function],
     assertNumberTypeAnnotation: [Function],
     isStringLiteralTypeAnnotation: [Function],
     assertStringLiteralTypeAnnotation: [Function],
     isStringTypeAnnotation: [Function],
     assertStringTypeAnnotation: [Function],
     isThisTypeAnnotation: [Function],
     assertThisTypeAnnotation: [Function],
     isTupleTypeAnnotation: [Function],
     assertTupleTypeAnnotation: [Function],
     isTypeofTypeAnnotation: [Function],
     assertTypeofTypeAnnotation: [Function],
     isTypeAlias: [Function],
     assertTypeAlias: [Function],
     isTypeAnnotation: [Function],
     assertTypeAnnotation: [Function],
     isTypeCastExpression: [Function],
     assertTypeCastExpression: [Function],
     isTypeParameterDeclaration: [Function],
     assertTypeParameterDeclaration: [Function],
     isTypeParameterInstantiation: [Function],
     assertTypeParameterInstantiation: [Function],
     isObjectTypeAnnotation: [Function],
     assertObjectTypeAnnotation: [Function],
     isObjectTypeCallProperty: [Function],
     assertObjectTypeCallProperty: [Function],
     isObjectTypeIndexer: [Function],
     assertObjectTypeIndexer: [Function],
     isObjectTypeProperty: [Function],
     assertObjectTypeProperty: [Function],
     isQualifiedTypeIdentifier: [Function],
     assertQualifiedTypeIdentifier: [Function],
     isUnionTypeAnnotation: [Function],
     assertUnionTypeAnnotation: [Function],
     isVoidTypeAnnotation: [Function],
     assertVoidTypeAnnotation: [Function],
     isJSXAttribute: [Function],
     assertJSXAttribute: [Function],
     isJSXClosingElement: [Function],
     assertJSXClosingElement: [Function],
     isJSXElement: [Function],
     assertJSXElement: [Function],
     isJSXEmptyExpression: [Function],
     assertJSXEmptyExpression: [Function],
     isJSXExpressionContainer: [Function],
     assertJSXExpressionContainer: [Function],
     isJSXIdentifier: [Function],
     assertJSXIdentifier: [Function],
     isJSXMemberExpression: [Function],
     assertJSXMemberExpression: [Function],
     isJSXNamespacedName: [Function],
     assertJSXNamespacedName: [Function],
     isJSXOpeningElement: [Function],
     assertJSXOpeningElement: [Function],
     isJSXSpreadAttribute: [Function],
     assertJSXSpreadAttribute: [Function],
     isJSXText: [Function],
     assertJSXText: [Function],
     isNoop: [Function],
     assertNoop: [Function],
     isParenthesizedExpression: [Function],
     assertParenthesizedExpression: [Function],
     isAwaitExpression: [Function],
     assertAwaitExpression: [Function],
     isBindExpression: [Function],
     assertBindExpression: [Function],
     isDecorator: [Function],
     assertDecorator: [Function],
     isDoExpression: [Function],
     assertDoExpression: [Function],
     isExportDefaultSpecifier: [Function],
     assertExportDefaultSpecifier: [Function],
     isExportNamespaceSpecifier: [Function],
     assertExportNamespaceSpecifier: [Function],
     isRestProperty: [Function],
     assertRestProperty: [Function],
     isSpreadProperty: [Function],
     assertSpreadProperty: [Function],
     FLIPPED_ALIAS_KEYS: 
      { Expression: [Object],
        Binary: [Object],
        Scopable: [Object],
        BlockParent: [Object],
        Block: [Object],
        Statement: [Object],
        Terminatorless: [Object],
        CompletionStatement: [Object],
        Conditional: [Object],
        Loop: [Object],
        While: [Object],
        ExpressionWrapper: [Object],
        For: [Object],
        ForXStatement: [Object],
        Function: [Object],
        FunctionParent: [Object],
        Pureish: [Object],
        Declaration: [Object],
        LVal: [Object],
        Literal: [Object],
        Immutable: [Object],
        UserWhitespacable: [Object],
        Method: [Object],
        ObjectMember: [Object],
        Property: [Object],
        UnaryLike: [Object],
        Pattern: [Object],
        Class: [Object],
        ModuleDeclaration: [Object],
        ExportDeclaration: [Object],
        ModuleSpecifier: [Object],
        Flow: [Object],
        FlowBaseAnnotation: [Object],
        FlowDeclaration: [Object],
        JSX: [Object] },
     EXPRESSION_TYPES: 
      [ 'ArrayExpression',
        'AssignmentExpression',
        'BinaryExpression',
        'CallExpression',
        'ConditionalExpression',
        'FunctionExpression',
        'Identifier',
        'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'RegExpLiteral',
        'LogicalExpression',
        'MemberExpression',
        'NewExpression',
        'ObjectExpression',
        'SequenceExpression',
        'ThisExpression',
        'UnaryExpression',
        'UpdateExpression',
        'ArrowFunctionExpression',
        'ClassExpression',
        'MetaProperty',
        'Super',
        'TaggedTemplateExpression',
        'TemplateLiteral',
        'YieldExpression',
        'TypeCastExpression',
        'JSXElement',
        'JSXEmptyExpression',
        'JSXIdentifier',
        'JSXMemberExpression',
        'ParenthesizedExpression',
        'AwaitExpression',
        'BindExpression',
        'DoExpression' ],
     isExpression: [Function],
     assertExpression: [Function],
     BINARY_TYPES: [ 'BinaryExpression', 'LogicalExpression' ],
     isBinary: [Function],
     assertBinary: [Function],
     SCOPABLE_TYPES: 
      [ 'BlockStatement',
        'CatchClause',
        'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'SwitchStatement',
        'WhileStatement',
        'ArrowFunctionExpression',
        'ClassDeclaration',
        'ClassExpression',
        'ForOfStatement',
        'ClassMethod' ],
     isScopable: [Function],
     assertScopable: [Function],
     BLOCKPARENT_TYPES: 
      [ 'BlockStatement',
        'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'SwitchStatement',
        'WhileStatement',
        'ArrowFunctionExpression',
        'ForOfStatement',
        'ClassMethod' ],
     isBlockParent: [Function],
     assertBlockParent: [Function],
     BLOCK_TYPES: [ 'BlockStatement', 'Program' ],
     isBlock: [Function],
     assertBlock: [Function],
     STATEMENT_TYPES: 
      [ 'BlockStatement',
        'BreakStatement',
        'ContinueStatement',
        'DebuggerStatement',
        'DoWhileStatement',
        'EmptyStatement',
        'ExpressionStatement',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'IfStatement',
        'LabeledStatement',
        'ReturnStatement',
        'SwitchStatement',
        'ThrowStatement',
        'TryStatement',
        'VariableDeclaration',
        'WhileStatement',
        'WithStatement',
        'ClassDeclaration',
        'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ForOfStatement',
        'ImportDeclaration',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'InterfaceDeclaration',
        'TypeAlias' ],
     isStatement: [Function],
     assertStatement: [Function],
     TERMINATORLESS_TYPES: 
      [ 'BreakStatement',
        'ContinueStatement',
        'ReturnStatement',
        'ThrowStatement',
        'YieldExpression',
        'AwaitExpression' ],
     isTerminatorless: [Function],
     assertTerminatorless: [Function],
     COMPLETIONSTATEMENT_TYPES: 
      [ 'BreakStatement',
        'ContinueStatement',
        'ReturnStatement',
        'ThrowStatement' ],
     isCompletionStatement: [Function],
     assertCompletionStatement: [Function],
     CONDITIONAL_TYPES: [ 'ConditionalExpression', 'IfStatement' ],
     isConditional: [Function],
     assertConditional: [Function],
     LOOP_TYPES: 
      [ 'DoWhileStatement',
        'ForInStatement',
        'ForStatement',
        'WhileStatement',
        'ForOfStatement' ],
     isLoop: [Function],
     assertLoop: [Function],
     WHILE_TYPES: [ 'DoWhileStatement', 'WhileStatement' ],
     isWhile: [Function],
     assertWhile: [Function],
     EXPRESSIONWRAPPER_TYPES: 
      [ 'ExpressionStatement',
        'TypeCastExpression',
        'ParenthesizedExpression' ],
     isExpressionWrapper: [Function],
     assertExpressionWrapper: [Function],
     FOR_TYPES: [ 'ForInStatement', 'ForStatement', 'ForOfStatement' ],
     isFor: [Function],
     assertFor: [Function],
     FORXSTATEMENT_TYPES: [ 'ForInStatement', 'ForOfStatement' ],
     isForXStatement: [Function],
     assertForXStatement: [Function],
     FUNCTION_TYPES: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'ObjectMethod',
        'ArrowFunctionExpression',
        'ClassMethod' ],
     isFunction: [Function],
     assertFunction: [Function],
     FUNCTIONPARENT_TYPES: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'Program',
        'ObjectMethod',
        'ArrowFunctionExpression',
        'ClassMethod' ],
     isFunctionParent: [Function],
     assertFunctionParent: [Function],
     PUREISH_TYPES: 
      [ 'FunctionDeclaration',
        'FunctionExpression',
        'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'ArrowFunctionExpression',
        'ClassDeclaration',
        'ClassExpression' ],
     isPureish: [Function],
     assertPureish: [Function],
     DECLARATION_TYPES: 
      [ 'FunctionDeclaration',
        'VariableDeclaration',
        'ClassDeclaration',
        'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ImportDeclaration',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'InterfaceDeclaration',
        'TypeAlias' ],
     isDeclaration: [Function],
     assertDeclaration: [Function],
     LVAL_TYPES: 
      [ 'Identifier',
        'MemberExpression',
        'RestElement',
        'AssignmentPattern',
        'ArrayPattern',
        'ObjectPattern' ],
     isLVal: [Function],
     assertLVal: [Function],
     LITERAL_TYPES: 
      [ 'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'RegExpLiteral',
        'TemplateLiteral' ],
     isLiteral: [Function],
     assertLiteral: [Function],
     IMMUTABLE_TYPES: 
      [ 'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'JSXAttribute',
        'JSXClosingElement',
        'JSXElement',
        'JSXExpressionContainer',
        'JSXOpeningElement' ],
     isImmutable: [Function],
     assertImmutable: [Function],
     USERWHITESPACABLE_TYPES: 
      [ 'ObjectMethod',
        'ObjectProperty',
        'ObjectTypeCallProperty',
        'ObjectTypeIndexer',
        'ObjectTypeProperty' ],
     isUserWhitespacable: [Function],
     assertUserWhitespacable: [Function],
     METHOD_TYPES: [ 'ObjectMethod', 'ClassMethod' ],
     isMethod: [Function],
     assertMethod: [Function],
     OBJECTMEMBER_TYPES: [ 'ObjectMethod', 'ObjectProperty' ],
     isObjectMember: [Function],
     assertObjectMember: [Function],
     PROPERTY_TYPES: [ 'ObjectProperty', 'ClassProperty' ],
     isProperty: [Function],
     assertProperty: [Function],
     UNARYLIKE_TYPES: 
      [ 'UnaryExpression',
        'SpreadElement',
        'RestProperty',
        'SpreadProperty' ],
     isUnaryLike: [Function],
     assertUnaryLike: [Function],
     PATTERN_TYPES: [ 'AssignmentPattern', 'ArrayPattern', 'ObjectPattern' ],
     isPattern: [Function],
     assertPattern: [Function],
     CLASS_TYPES: [ 'ClassDeclaration', 'ClassExpression' ],
     isClass: [Function],
     assertClass: [Function],
     MODULEDECLARATION_TYPES: 
      [ 'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ImportDeclaration' ],
     isModuleDeclaration: [Function],
     assertModuleDeclaration: [Function],
     EXPORTDECLARATION_TYPES: 
      [ 'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration' ],
     isExportDeclaration: [Function],
     assertExportDeclaration: [Function],
     MODULESPECIFIER_TYPES: 
      [ 'ExportSpecifier',
        'ImportDefaultSpecifier',
        'ImportNamespaceSpecifier',
        'ImportSpecifier',
        'ExportDefaultSpecifier',
        'ExportNamespaceSpecifier' ],
     isModuleSpecifier: [Function],
     assertModuleSpecifier: [Function],
     FLOW_TYPES: 
      [ 'AnyTypeAnnotation',
        'ArrayTypeAnnotation',
        'BooleanTypeAnnotation',
        'BooleanLiteralTypeAnnotation',
        'NullLiteralTypeAnnotation',
        'ClassImplements',
        'ClassProperty',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'ExistentialTypeParam',
        'FunctionTypeAnnotation',
        'FunctionTypeParam',
        'GenericTypeAnnotation',
        'InterfaceExtends',
        'InterfaceDeclaration',
        'IntersectionTypeAnnotation',
        'MixedTypeAnnotation',
        'NullableTypeAnnotation',
        'NumericLiteralTypeAnnotation',
        'NumberTypeAnnotation',
        'StringLiteralTypeAnnotation',
        'StringTypeAnnotation',
        'ThisTypeAnnotation',
        'TupleTypeAnnotation',
        'TypeofTypeAnnotation',
        'TypeAlias',
        'TypeAnnotation',
        'TypeCastExpression',
        'TypeParameterDeclaration',
        'TypeParameterInstantiation',
        'ObjectTypeAnnotation',
        'ObjectTypeCallProperty',
        'ObjectTypeIndexer',
        'ObjectTypeProperty',
        'QualifiedTypeIdentifier',
        'UnionTypeAnnotation',
        'VoidTypeAnnotation' ],
     isFlow: [Function],
     assertFlow: [Function],
     FLOWBASEANNOTATION_TYPES: 
      [ 'AnyTypeAnnotation',
        'BooleanTypeAnnotation',
        'NullLiteralTypeAnnotation',
        'MixedTypeAnnotation',
        'NumberTypeAnnotation',
        'StringTypeAnnotation',
        'ThisTypeAnnotation',
        'VoidTypeAnnotation' ],
     isFlowBaseAnnotation: [Function],
     assertFlowBaseAnnotation: [Function],
     FLOWDECLARATION_TYPES: 
      [ 'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'InterfaceDeclaration',
        'TypeAlias' ],
     isFlowDeclaration: [Function],
     assertFlowDeclaration: [Function],
     JSX_TYPES: 
      [ 'JSXAttribute',
        'JSXClosingElement',
        'JSXElement',
        'JSXEmptyExpression',
        'JSXExpressionContainer',
        'JSXIdentifier',
        'JSXMemberExpression',
        'JSXNamespacedName',
        'JSXOpeningElement',
        'JSXSpreadAttribute',
        'JSXText' ],
     isJSX: [Function],
     assertJSX: [Function],
     TYPES: 
      [ 'ArrayExpression',
        'AssignmentExpression',
        'BinaryExpression',
        'Directive',
        'DirectiveLiteral',
        'BlockStatement',
        'BreakStatement',
        'CallExpression',
        'CatchClause',
        'ConditionalExpression',
        'ContinueStatement',
        'DebuggerStatement',
        'DoWhileStatement',
        'EmptyStatement',
        'ExpressionStatement',
        'File',
        'ForInStatement',
        'ForStatement',
        'FunctionDeclaration',
        'FunctionExpression',
        'Identifier',
        'IfStatement',
        'LabeledStatement',
        'StringLiteral',
        'NumericLiteral',
        'NullLiteral',
        'BooleanLiteral',
        'RegExpLiteral',
        'LogicalExpression',
        'MemberExpression',
        'NewExpression',
        'Program',
        'ObjectExpression',
        'ObjectMethod',
        'ObjectProperty',
        'RestElement',
        'ReturnStatement',
        'SequenceExpression',
        'SwitchCase',
        'SwitchStatement',
        'ThisExpression',
        'ThrowStatement',
        'TryStatement',
        'UnaryExpression',
        'UpdateExpression',
        'VariableDeclaration',
        'VariableDeclarator',
        'WhileStatement',
        'WithStatement',
        'AssignmentPattern',
        'ArrayPattern',
        'ArrowFunctionExpression',
        'ClassBody',
        'ClassDeclaration',
        'ClassExpression',
        'ExportAllDeclaration',
        'ExportDefaultDeclaration',
        'ExportNamedDeclaration',
        'ExportSpecifier',
        'ForOfStatement',
        'ImportDeclaration',
        'ImportDefaultSpecifier',
        'ImportNamespaceSpecifier',
        'ImportSpecifier',
        'MetaProperty',
        'ClassMethod',
        'ObjectPattern',
        'SpreadElement',
        'Super',
        'TaggedTemplateExpression',
        'TemplateElement',
        'TemplateLiteral',
        'YieldExpression',
        'AnyTypeAnnotation',
        'ArrayTypeAnnotation',
        'BooleanTypeAnnotation',
        'BooleanLiteralTypeAnnotation',
        'NullLiteralTypeAnnotation',
        'ClassImplements',
        'ClassProperty',
        'DeclareClass',
        'DeclareFunction',
        'DeclareInterface',
        'DeclareModule',
        'DeclareTypeAlias',
        'DeclareVariable',
        'ExistentialTypeParam',
        'FunctionTypeAnnotation',
        'FunctionTypeParam',
        'GenericTypeAnnotation',
        'InterfaceExtends',
        'InterfaceDeclaration',
        'IntersectionTypeAnnotation',
        'MixedTypeAnnotation',
        'NullableTypeAnnotation',
        'NumericLiteralTypeAnnotation',
        'NumberTypeAnnotation',
        'StringLiteralTypeAnnotation',
        'StringTypeAnnotation',
        'ThisTypeAnnotation',
        'TupleTypeAnnotation',
        'TypeofTypeAnnotation',
        'TypeAlias',
        'TypeAnnotation',
        'TypeCastExpression',
        'TypeParameterDeclaration',
        'TypeParameterInstantiation',
        'ObjectTypeAnnotation',
        'ObjectTypeCallProperty',
        'ObjectTypeIndexer',
        'ObjectTypeProperty',
        'QualifiedTypeIdentifier',
        'UnionTypeAnnotation',
        'VoidTypeAnnotation',
        'JSXAttribute',
        'JSXClosingElement',
        'JSXElement',
        'JSXEmptyExpression',
        'JSXExpressionContainer',
        'JSXIdentifier',
        'JSXMemberExpression',
        'JSXNamespacedName',
        'JSXOpeningElement',
        'JSXSpreadAttribute',
        'JSXText',
        'Noop',
        'ParenthesizedExpression',
        'AwaitExpression',
        'BindExpression',
        'Decorator',
        'DoExpression',
        'ExportDefaultSpecifier',
        'ExportNamespaceSpecifier',
        'RestProperty',
        'SpreadProperty',
        'Expression',
        'Binary',
        'Scopable',
        'BlockParent',
        'Block',
        'Statement',
        'Terminatorless',
        'CompletionStatement',
        'Conditional',
        'Loop',
        'While',
        'ExpressionWrapper',
        'For',
        'ForXStatement',
        'Function',
        'FunctionParent',
        'Pureish',
        'Declaration',
        'LVal',
        'Literal',
        'Immutable',
        'UserWhitespacable',
        'Method',
        'ObjectMember',
        'Property',
        'UnaryLike',
        'Pattern',
        'Class',
        'ModuleDeclaration',
        'ExportDeclaration',
        'ModuleSpecifier',
        'Flow',
        'FlowBaseAnnotation',
        'FlowDeclaration',
        'JSX',
        'NumberLiteral',
        'RegexLiteral',
        'ReferencedIdentifier',
        'ReferencedMemberExpression',
        'BindingIdentifier',
        'Scope',
        'Referenced',
        'BlockScoped',
        'Var',
        'User',
        'Generated',
        'Pure' ],
     ArrayExpression: [Function: builder],
     arrayExpression: [Function: builder],
     AssignmentExpression: [Function: builder],
     assignmentExpression: [Function: builder],
     BinaryExpression: [Function: builder],
     binaryExpression: [Function: builder],
     Directive: [Function: builder],
     directive: [Function: builder],
     DirectiveLiteral: [Function: builder],
     directiveLiteral: [Function: builder],
     BlockStatement: [Function: builder],
     blockStatement: [Function: builder],
     BreakStatement: [Function: builder],
     breakStatement: [Function: builder],
     CallExpression: [Function: builder],
     callExpression: [Function: builder],
     CatchClause: [Function: builder],
     catchClause: [Function: builder],
     ConditionalExpression: [Function: builder],
     conditionalExpression: [Function: builder],
     ContinueStatement: [Function: builder],
     continueStatement: [Function: builder],
     DebuggerStatement: [Function: builder],
     debuggerStatement: [Function: builder],
     DoWhileStatement: [Function: builder],
     doWhileStatement: [Function: builder],
     EmptyStatement: [Function: builder],
     emptyStatement: [Function: builder],
     ExpressionStatement: [Function: builder],
     expressionStatement: [Function: builder],
     File: [Function: builder],
     file: [Function: builder],
     ForInStatement: [Function: builder],
     forInStatement: [Function: builder],
     ForStatement: [Function: builder],
     forStatement: [Function: builder],
     FunctionDeclaration: [Function: builder],
     functionDeclaration: [Function: builder],
     FunctionExpression: [Function: builder],
     functionExpression: [Function: builder],
     Identifier: [Function: builder],
     identifier: [Function: builder],
     IfStatement: [Function: builder],
     ifStatement: [Function: builder],
     LabeledStatement: [Function: builder],
     labeledStatement: [Function: builder],
     StringLiteral: [Function: builder],
     stringLiteral: [Function: builder],
     NumericLiteral: [Function: builder],
     numericLiteral: [Function: builder],
     NullLiteral: [Function: builder],
     nullLiteral: [Function: builder],
     BooleanLiteral: [Function: builder],
     booleanLiteral: [Function: builder],
     RegExpLiteral: [Function: builder],
     regExpLiteral: [Function: builder],
     LogicalExpression: [Function: builder],
     logicalExpression: [Function: builder],
     MemberExpression: [Function: builder],
     memberExpression: [Function: builder],
     NewExpression: [Function: builder],
     newExpression: [Function: builder],
     Program: [Function: builder],
     program: [Function: builder],
     ObjectExpression: [Function: builder],
     objectExpression: [Function: builder],
     ObjectMethod: [Function: builder],
     objectMethod: [Function: builder],
     ObjectProperty: [Function: builder],
     objectProperty: [Function: builder],
     RestElement: [Function: builder],
     restElement: [Function: builder],
     ReturnStatement: [Function: builder],
     returnStatement: [Function: builder],
     SequenceExpression: [Function: builder],
     sequenceExpression: [Function: builder],
     SwitchCase: [Function: builder],
     switchCase: [Function: builder],
     SwitchStatement: [Function: builder],
     switchStatement: [Function: builder],
     ThisExpression: [Function: builder],
     thisExpression: [Function: builder],
     ThrowStatement: [Function: builder],
     throwStatement: [Function: builder],
     TryStatement: [Function: builder],
     tryStatement: [Function: builder],
     UnaryExpression: [Function: builder],
     unaryExpression: [Function: builder],
     UpdateExpression: [Function: builder],
     updateExpression: [Function: builder],
     VariableDeclaration: [Function: builder],
     variableDeclaration: [Function: builder],
     VariableDeclarator: [Function: builder],
     variableDeclarator: [Function: builder],
     WhileStatement: [Function: builder],
     whileStatement: [Function: builder],
     WithStatement: [Function: builder],
     withStatement: [Function: builder],
     AssignmentPattern: [Function: builder],
     assignmentPattern: [Function: builder],
     ArrayPattern: [Function: builder],
     arrayPattern: [Function: builder],
     ArrowFunctionExpression: [Function: builder],
     arrowFunctionExpression: [Function: builder],
     ClassBody: [Function: builder],
     classBody: [Function: builder],
     ClassDeclaration: [Function: builder],
     classDeclaration: [Function: builder],
     ClassExpression: [Function: builder],
     classExpression: [Function: builder],
     ExportAllDeclaration: [Function: builder],
     exportAllDeclaration: [Function: builder],
     ExportDefaultDeclaration: [Function: builder],
     exportDefaultDeclaration: [Function: builder],
     ExportNamedDeclaration: [Function: builder],
     exportNamedDeclaration: [Function: builder],
     ExportSpecifier: [Function: builder],
     exportSpecifier: [Function: builder],
     ForOfStatement: [Function: builder],
     forOfStatement: [Function: builder],
     ImportDeclaration: [Function: builder],
     importDeclaration: [Function: builder],
     ImportDefaultSpecifier: [Function: builder],
     importDefaultSpecifier: [Function: builder],
     ImportNamespaceSpecifier: [Function: builder],
     importNamespaceSpecifier: [Function: builder],
     ImportSpecifier: [Function: builder],
     importSpecifier: [Function: builder],
     MetaProperty: [Function: builder],
     metaProperty: [Function: builder],
     ClassMethod: [Function: builder],
     classMethod: [Function: builder],
     ObjectPattern: [Function: builder],
     objectPattern: [Function: builder],
     SpreadElement: [Function: builder],
     spreadElement: [Function: builder],
     Super: [Function: builder],
     super: [Function: builder],
     TaggedTemplateExpression: [Function: builder],
     taggedTemplateExpression: [Function: builder],
     TemplateElement: [Function: builder],
     templateElement: [Function: builder],
     TemplateLiteral: [Function: builder],
     templateLiteral: [Function: builder],
     YieldExpression: [Function: builder],
     yieldExpression: [Function: builder],
     AnyTypeAnnotation: [Function: builder],
     anyTypeAnnotation: [Function: builder],
     ArrayTypeAnnotation: [Function: builder],
     arrayTypeAnnotation: [Function: builder],
     BooleanTypeAnnotation: [Function: builder],
     booleanTypeAnnotation: [Function: builder],
     BooleanLiteralTypeAnnotation: [Function: builder],
     booleanLiteralTypeAnnotation: [Function: builder],
     NullLiteralTypeAnnotation: [Function: builder],
     nullLiteralTypeAnnotation: [Function: builder],
     ClassImplements: [Function: builder],
     classImplements: [Function: builder],
     ClassProperty: [Function: builder],
     classProperty: [Function: builder],
     DeclareClass: [Function: builder],
     declareClass: [Function: builder],
     DeclareFunction: [Function: builder],
     declareFunction: [Function: builder],
     DeclareInterface: [Function: builder],
     declareInterface: [Function: builder],
     DeclareModule: [Function: builder],
     declareModule: [Function: builder],
     DeclareTypeAlias: [Function: builder],
     declareTypeAlias: [Function: builder],
     DeclareVariable: [Function: builder],
     declareVariable: [Function: builder],
     ExistentialTypeParam: [Function: builder],
     existentialTypeParam: [Function: builder],
     FunctionTypeAnnotation: [Function: builder],
     functionTypeAnnotation: [Function: builder],
     FunctionTypeParam: [Function: builder],
     functionTypeParam: [Function: builder],
     GenericTypeAnnotation: [Function: builder],
     genericTypeAnnotation: [Function: builder],
     InterfaceExtends: [Function: builder],
     interfaceExtends: [Function: builder],
     InterfaceDeclaration: [Function: builder],
     interfaceDeclaration: [Function: builder],
     IntersectionTypeAnnotation: [Function: builder],
     intersectionTypeAnnotation: [Function: builder],
     MixedTypeAnnotation: [Function: builder],
     mixedTypeAnnotation: [Function: builder],
     NullableTypeAnnotation: [Function: builder],
     nullableTypeAnnotation: [Function: builder],
     NumericLiteralTypeAnnotation: [Function: builder],
     numericLiteralTypeAnnotation: [Function: builder],
     NumberTypeAnnotation: [Function: builder],
     numberTypeAnnotation: [Function: builder],
     StringLiteralTypeAnnotation: [Function: builder],
     stringLiteralTypeAnnotation: [Function: builder],
     StringTypeAnnotation: [Function: builder],
     stringTypeAnnotation: [Function: builder],
     ThisTypeAnnotation: [Function: builder],
     thisTypeAnnotation: [Function: builder],
     TupleTypeAnnotation: [Function: builder],
     tupleTypeAnnotation: [Function: builder],
     TypeofTypeAnnotation: [Function: builder],
     typeofTypeAnnotation: [Function: builder],
     TypeAlias: [Function: builder],
     typeAlias: [Function: builder],
     TypeAnnotation: [Function: builder],
     typeAnnotation: [Function: builder],
     TypeCastExpression: [Function: builder],
     typeCastExpression: [Function: builder],
     TypeParameterDeclaration: [Function: builder],
     typeParameterDeclaration: [Function: builder],
     TypeParameterInstantiation: [Function: builder],
     typeParameterInstantiation: [Function: builder],
     ObjectTypeAnnotation: [Function: builder],
     objectTypeAnnotation: [Function: builder],
     ObjectTypeCallProperty: [Function: builder],
     objectTypeCallProperty: [Function: builder],
     ObjectTypeIndexer: [Function: builder],
     objectTypeIndexer: [Function: builder],
     ObjectTypeProperty: [Function: builder],
     objectTypeProperty: [Function: builder],
     QualifiedTypeIdentifier: [Function: builder],
     qualifiedTypeIdentifier: [Function: builder],
     UnionTypeAnnotation: [Function: builder],
     unionTypeAnnotation: [Function: builder],
     VoidTypeAnnotation: [Function: builder],
     voidTypeAnnotation: [Function: builder],
     JSXAttribute: [Function: builder],
     jSXAttribute: [Function: builder],
     JSXClosingElement: [Function: builder],
     jSXClosingElement: [Function: builder],
     JSXElement: [Function: builder],
     jSXElement: [Function: builder],
     JSXEmptyExpression: [Function: builder],
     jSXEmptyExpression: [Function: builder],
     JSXExpressionContainer: [Function: builder],
     jSXExpressionContainer: [Function: builder],
     JSXIdentifier: [Function: builder],
     jSXIdentifier: [Function: builder],
     JSXMemberExpression: [Function: builder],
     jSXMemberExpression: [Function: builder],
     JSXNamespacedName: [Function: builder],
     jSXNamespacedName: [Function: builder],
     JSXOpeningElement: [Function: builder],
     jSXOpeningElement: [Function: builder],
     JSXSpreadAttribute: [Function: builder],
     jSXSpreadAttribute: [Function: builder],
     JSXText: [Function: builder],
     jSXText: [Function: builder],
     Noop: [Function: builder],
     noop: [Function: builder],
     ParenthesizedExpression: [Function: builder],
     parenthesizedExpression: [Function: builder],
     AwaitExpression: [Function: builder],
     awaitExpression: [Function: builder],
     BindExpression: [Function: builder],
     bindExpression: [Function: builder],
     Decorator: [Function: builder],
     decorator: [Function: builder],
     DoExpression: [Function: builder],
     doExpression: [Function: builder],
     ExportDefaultSpecifier: [Function: builder],
     exportDefaultSpecifier: [Function: builder],
     ExportNamespaceSpecifier: [Function: builder],
     exportNamespaceSpecifier: [Function: builder],
     RestProperty: [Function: builder],
     restProperty: [Function: builder],
     SpreadProperty: [Function: builder],
     spreadProperty: [Function: builder],
     numberLiteral: [Function],
     NumberLiteral: [Function],
     isNumberLiteral: [Function],
     assertNumberLiteral: [Function],
     regexLiteral: [Function],
     RegexLiteral: [Function],
     isRegexLiteral: [Function],
     assertRegexLiteral: [Function],
     getBindingIdentifiers: { [Function: getBindingIdentifiers] keys: [Object] },
     getOuterBindingIdentifiers: [Function: getOuterBindingIdentifiers],
     isBinding: [Function: isBinding],
     isReferenced: [Function: isReferenced],
     isValidIdentifier: [Function: isValidIdentifier],
     isLet: [Function: isLet],
     isBlockScoped: [Function: isBlockScoped],
     isVar: [Function: isVar],
     isSpecifierDefault: [Function: isSpecifierDefault],
     isScope: [Function: isScope],
     toComputedKey: [Function: toComputedKey],
     toSequenceExpression: [Function: toSequenceExpression],
     toKeyAlias: { [Function: toKeyAlias] uid: 0, increment: [Function] },
     toIdentifier: [Function: toIdentifier],
     toBindingIdentifierName: [Function: toBindingIdentifierName],
     toStatement: [Function: toStatement],
     toExpression: [Function: toExpression],
     toBlock: [Function: toBlock],
     valueToNode: [Function: valueToNode],
     createUnionTypeAnnotation: [Function: createUnionTypeAnnotation],
     removeTypeDuplicates: [Function: removeTypeDuplicates],
     createTypeAnnotationBasedOnTypeof: [Function: createTypeAnnotationBasedOnTypeof] },
  traverse: 
   { [Function: traverse]
     visitors: 
      { __esModule: true,
        explode: [Function: explode],
        verify: [Function: verify],
        merge: [Function: merge] },
     verify: [Function: verify],
     explode: [Function: explode],
     NodePath: { [Function: NodePath] get: [Function: get] },
     Scope: { [Function: Scope] globals: [Object], contextVariables: [Object] },
     Hub: [Function: Hub],
     cheap: [Function],
     node: [Function],
     clearNode: [Function],
     removeProperties: [Function],
     hasType: [Function],
     clearCache: [Function],
     copyCache: [Function] },
  OptionManager: 
   { [Function: OptionManager]
     memoisePluginContainer: [Function: memoisePluginContainer],
     createBareOptions: [Function: createBareOptions],
     normalisePlugin: [Function: normalisePlugin],
     normalisePlugins: [Function: normalisePlugins],
     memoisedPlugins: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ] },
  Pipeline: [Function: Pipeline],
  analyse: [Function: bound analyse],
  transform: [Function: bound transform],
  transformFromAst: [Function: bound transformFromAst] }
    at assertPath (path.js:8:11)
    at Object.posix.resolve (path.js:426:5)
    at module.exports (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/react-transform/index.js:9:15)
    at Function.memoisePluginContainer (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:109:13)
    at Function.normalisePlugin (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:143:32)
    at /Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:183:30
    at Array.map (native)
    at Function.normalisePlugins (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:155:20)
    at OptionManager.mergeOptions (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:277:36)
    at OptionManager.mergeOptions (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:330:10)
    at OptionManager.addConfig (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:207:10)
    at OptionManager.findConfigs (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:413:16)
    at OptionManager.init (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/options/option-manager.js:461:12)
    at File.initOptions (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/index.js:194:75)
    at new File (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/file/index.js:123:22)
    at Pipeline.transform (/Users/sondra/Programming/hackreactor/thesis/buoyantpyramid/node_modules/babel-core/lib/transformation/pipeline.js:45:16)
Child html-webpack-plugin for "index.html":
    chunk    {0} index.html 480 kB
         + 3 hidden modules
webpack: bundle is now VALID.
